<Events startTimestamp="1495725263771" logVersion="0.11.0.201504031625" osName="Mac OS X" osVersion="10.11.6" lineSeparator="\n" numMonitors="1" monitorBounds="[0, 0, 1280, 800]">
  <Command __id="0" _type="ShellBoundsCommand" bounds="[0, 23, 1280, 733]" timestamp="50" />
  <Command __id="1" _type="ShellBoundsCommand" bounds="[0, 23, 1280, 731]" repeat="2" timestamp="196788" timestamp2="196829" />
  <Command __id="3" _type="FileOpenCommand" docASTNodeCount="895" docActiveCodeLength="5759" docExpressionCount="611" docLength="7908" projectName="espionage" timestamp="237423">
    <filePath><![CDATA[/Users/user/Documents/workspace/dev/espionage/plugin/espionage/src/edu/cwi/espionage/views/TreeDisplay.java]]></filePath>
    <snapshot><![CDATA[/*
 * Copyright (c) 1995, 2008, Oracle and/or its affiliates. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   - Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *
 *   - Neither the name of Oracle or the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */ 
package edu.cwi.espionage.views;

import javax.swing.ButtonGroup;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.UIManager;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreeSelectionModel;

import org.jfree.chart.ChartPanel;

import edu.cwi.espionage.interfaces.SelectedYValueListener;
import edu.cwi.espionage.model.ProcessCase;
import edu.cwi.espionage.util.LineChart;
import edu.cwi.espionage.util.Utils;

import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.GridLayout;
import java.util.Map.Entry;

public class TreeDisplay extends JPanel
                      implements TreeSelectionListener, SelectedYValueListener {
 
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private ChartPanel infoPane;
    private LineChart lineChart;
    private JTree tree;
    private String yValue;
    
    //Optionally set the look and feel.
    private static boolean useSystemLookAndFeel = false;

    public TreeDisplay(Map<String, HashMap<String, ProcessCase>> project) {
        super(new GridLayout(1,0));

        //Create the nodes.
        DefaultMutableTreeNode top =
            new DefaultMutableTreeNode("Espionage");
        createNodes(top,project);

        //Create a tree that allows one selection at a time.
        tree = new JTree(top);
        tree.getSelectionModel().setSelectionMode
                (TreeSelectionModel.SINGLE_TREE_SELECTION);

        //Listen for when the selection changes.
        tree.addTreeSelectionListener(this);
        //Create the scroll pane and add the tree to it. 
        JScrollPane treeView = new JScrollPane(tree);
        
        JSplitPane splitPaneFirst = new JSplitPane(JSplitPane.VERTICAL_SPLIT);
        splitPaneFirst.setTopComponent(getSelectionGroup());
        splitPaneFirst.setBottomComponent(treeView);
        
        lineChart = new LineChart();
        infoPane = lineChart.getLineChartPanel("", new ProcessCase(""));
        infoPane.setVisible(false);
        JScrollPane infoView = new JScrollPane(infoPane);
        //Add the scroll panes to a split pane.
        JSplitPane splitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);
        splitPane.setTopComponent(splitPaneFirst);
        splitPane.setBottomComponent(infoView);
        Dimension minimumSize = new Dimension(100, 50);
        infoPane.setMinimumSize(minimumSize);
        treeView.setMinimumSize(minimumSize);
        splitPane.setDividerLocation(200); 
        splitPane.setPreferredSize(new Dimension(500, 300));

        //Add the split pane to this panel.
        add(splitPane);
    }

    /** Required by TreeSelectionListener interface. */
    public void valueChanged(TreeSelectionEvent e) {
        DefaultMutableTreeNode node = (DefaultMutableTreeNode)
                           tree.getLastSelectedPathComponent();

        if (node == null) return;

        Object nodeInfo = node.getUserObject();
        if (node.isLeaf()) {
            ProcessCase processCase = (ProcessCase)nodeInfo;
            System.out.println("TreeSelectionListener#valueChanged");
            System.out.println(processCase.getCaseId()+" => "+processCase.getTotalTime());
            System.out.println(processCase.getIdleTimeTable().toString());
            String title = "Time spent on "+processCase.getCaseId();
            title += ". Overall Time is ("+Utils.getYValue(processCase.getTotalTime(), yValue)+" "+yValue+")";
            infoPane.setChart(lineChart.createChart(title, processCase, yValue));
            infoPane.setVisible(true);
        }
    }


    private void createNodes(DefaultMutableTreeNode top, Map<String, HashMap<String, ProcessCase>> project) {
        DefaultMutableTreeNode pName = null;
        DefaultMutableTreeNode cName = null;

		
		Iterator<Entry<String, HashMap<String, ProcessCase>>> pit = project.entrySet().iterator();
	    while (pit.hasNext()) {
	        Map.Entry<String, HashMap<String, ProcessCase>> ppair = pit.next();
	        System.out.println(ppair.getKey());
	        pName = new DefaultMutableTreeNode(ppair.getKey());
			top.add(pName);
			
			Iterator<Entry<String, ProcessCase>> cit = ppair.getValue().entrySet().iterator();
		    while (cit.hasNext()) {
		        Map.Entry<String, ProcessCase> cpair = cit.next();
		        cName = new DefaultMutableTreeNode(cpair.getValue());
				pName.add(cName);
		    }
		}
		
    }
    
    /**
     * Create the GUI and show it.  For thread safety,
     * this method should be invoked from the
     * event dispatch thread.
     */
    public static void createAndShowGUI(Frame frame, Map<String, HashMap<String, ProcessCase>> project) {
        if (useSystemLookAndFeel) {
            try {
                UIManager.setLookAndFeel(
                    UIManager.getSystemLookAndFeelClassName());
            } catch (Exception e) {
                System.err.println("Couldn't use system look and feel.");
            }
        }

        //Add content to the window.
        TreeDisplay display = new TreeDisplay(project);
        
        
		frame.add(display);

        //Display the window.
        frame.pack();
        frame.setVisible(true);
    }


	@Override
	public void yValueSelected(ButtonSelection btn) {
		this.yValue = btn.getBtn().getText();
		infoPane.setVisible(false);
		
		
		
	}
	
	public JScrollPane getSelectionGroup(){
		JPanel controlPanel = new JPanel();
	    controlPanel.setLayout(new GridLayout(1,2));
	    ButtonSelection btnMins = new ButtonSelection(Utils.Y_MINUTES, true);
	    ButtonSelection btnHrs = new ButtonSelection(Utils.Y_HOURS, false);
	    btnMins.addSelectedYValueListener(this);
	    btnHrs.addSelectedYValueListener(this);
	    this.yValue = Utils.Y_MINUTES;
		//Group the radio buttons.
	    ButtonGroup group = new ButtonGroup();
	    group.add(btnMins.getBtn());
	    group.add(btnHrs.getBtn());
	    controlPanel.add(btnMins.getBtn());
	    controlPanel.add(btnHrs.getBtn());
	    JScrollPane slt = new JScrollPane(controlPanel);
	    slt.setMinimumSize(new Dimension(100, 50));
	    return slt;
		
	}


}
]]></snapshot>
  </Command>
  <Command __id="4" _type="MoveCaretCommand" caretOffset="0" docOffset="3" timestamp="238015" />
  <Command __id="5" _type="MoveCaretCommand" caretOffset="5650" docOffset="7903" timestamp="283019" />
  <Command __id="6" _type="FileOpenCommand" docASTNodeCount="309" docActiveCodeLength="1935" docExpressionCount="177" docLength="2165" projectName="espionage" timestamp="760086">
    <filePath><![CDATA[/Users/user/Documents/workspace/dev/espionage/plugin/espionage/src/edu/cwi/espionage/util/CSVUtils.java]]></filePath>
    <snapshot><![CDATA[package edu.cwi.espionage.util;

import java.util.ArrayList;
import java.util.List;

public class CSVUtils{

	private static final char DEFAULT_SEPARATOR = ',';
	private static final char DEFAULT_QUOTE = '"';

	public static List<String> parseLine(String cvsLine) {
		return parseLine(cvsLine, DEFAULT_SEPARATOR, DEFAULT_QUOTE);
	}

	public static List<String> parseLine(String cvsLine, char separators) {
		return parseLine(cvsLine, separators, DEFAULT_QUOTE);
	}

	public static List<String> parseLine(String cvsLine, char separators, char customQuote) {

		List<String> result = new ArrayList<>();

		// if empty, return!
		if (cvsLine == null || cvsLine.isEmpty()) {
			return result;
		}

		if (customQuote == ' ') {
			customQuote = DEFAULT_QUOTE;
		}

		if (separators == ' ') {
			separators = DEFAULT_SEPARATOR;
		}

		StringBuffer curVal = new StringBuffer();
		boolean inQuotes = false;
		boolean startCollectChar = false;
		boolean doubleQuotesInColumn = false;

		char[] chars = cvsLine.toCharArray();

		for (char ch : chars) {

			if (inQuotes) {
				startCollectChar = true;
				if (ch == customQuote) {
					inQuotes = false;
					doubleQuotesInColumn = false;
				} else {

					// Fixed : allow "" in custom quote enclosed
					if (ch == '\"') {
						if (!doubleQuotesInColumn) {
							curVal.append(ch);
							doubleQuotesInColumn = true;
						}
					} else {
						curVal.append(ch);
					}

				}
			} else {
				if (ch == customQuote) {

					inQuotes = true;

					// Fixed : allow "" in empty quote enclosed
					if (chars[0] != '"' && customQuote == '\"') {
						curVal.append('"');
					}

					// double quotes in column will hit this!
					if (startCollectChar) {
						curVal.append('"');
					}

				} else if (ch == separators) {

					result.add(curVal.toString());

					curVal = new StringBuffer();
					startCollectChar = false;

				} else if (ch == '\r') {
					// ignore LF characters
					continue;
				} else if (ch == '\n') {
					// the end, break!
					break;
				} else {
					curVal.append(ch);
				}
			}

		}

		result.add(curVal.toString());

		return result;
	}
	// TODO Need to add tests same as vogella



}
]]></snapshot>
  </Command>
  <Command __id="7" _type="MoveCaretCommand" caretOffset="0" docOffset="0" timestamp="760387" />
  <Command __id="8" _type="FileOpenCommand" docASTNodeCount="895" docActiveCodeLength="5759" docExpressionCount="611" docLength="7908" projectName="espionage" timestamp="794493">
    <filePath><![CDATA[/Users/user/Documents/workspace/dev/espionage/plugin/espionage/src/edu/cwi/espionage/views/TreeDisplay.java]]></filePath>
  </Command>
  <Command __id="9" _type="MoveCaretCommand" caretOffset="5650" docOffset="7903" timestamp="794634" />
  <Command __id="10" _type="SelectTextCommand" caretOffset="2603" docEnd="5092" docOffset="4856" docStart="4856" end="2839" start="2603" timestamp="807597" />
  <DocumentChange __id="11" _type="Delete" docASTNodeCount="863" docActiveCodeLength="5523" docExpressionCount="582" docLength="7672" endLine="125" length="236" offset="4856" startLine="122" timestamp="808175">
    <text><![CDATA[
            System.out.println("TreeSelectionListener#valueChanged");
            System.out.println(processCase.getCaseId()+" => "+processCase.getTotalTime());
            System.out.println(processCase.getIdleTimeTable().toString());]]></text>
  </DocumentChange>
  <Command __id="12" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" timestamp="808281" />
  <Command __id="13" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" timestamp="810476" />
  <Command __id="14" _type="MoveCaretCommand" caretOffset="1360" docOffset="3613" timestamp="868114" />
  <Command __id="15" _type="SelectTextCommand" caretOffset="1371" docEnd="3624" docOffset="3624" docStart="3607" end="1371" start="1354" timestamp="868365" />
  <Command __id="16" _type="SelectTextCommand" caretOffset="4701" docEnd="6954" docOffset="6954" docStart="6937" end="4701" start="4684" timestamp="876137" />
  <Command __id="17" _type="MoveCaretCommand" caretOffset="5225" docOffset="7478" timestamp="931043" />
  <Command __id="18" _type="MoveCaretCommand" caretOffset="627" docOffset="2880" timestamp="1185317" />
  <Command __id="19" _type="MoveCaretCommand" caretOffset="3851" docOffset="6104" timestamp="1188849" />
  <Command __id="20" _type="ShellBoundsCommand" bounds="[0, 23, 1280, 730]" repeat="2" timestamp="1195915" timestamp2="1195925" />
  <Command __id="22" _type="FileOpenCommand" docASTNodeCount="236" docActiveCodeLength="1349" docExpressionCount="152" docLength="1518" projectName="espionage" timestamp="1199246">
    <filePath><![CDATA[/Users/user/Documents/workspace/dev/espionage/plugin/espionage/src/edu/cwi/espionage/model/Event.java]]></filePath>
    <snapshot><![CDATA[package edu.cwi.espionage.model;

import java.util.Date;

public class Event implements Comparable<Event>{
	
	//private String caseId;
	private Date timestamp;
	private String activity;
	private long elapstime;
	
	public Event(Date timestamp, long elapstime, String activity) {
		//this.caseId = caseId;
		this.timestamp = timestamp;
		this.activity = activity;
		this.elapstime = elapstime;
	}
	
//	public String getCaseId() {
//		return caseId;
//	}
//	public void setCaseId(String caseId) {
//		this.caseId = caseId;
//	}
	public Date getTimestamp() {
		return timestamp;
	}
	public void setTimestamp(Date timestamp) {
		this.timestamp = timestamp;
	}
	public String getActivity() {
		return activity;
	}
	public void setActivity(String activity) {
		this.activity = activity;
	}
	
	@Override
	public String toString() {
		return "EVENTS:: ["+getActivity()+" || "+getTimestamp().toString()+" ELAPSE = "+getElapstime()+"]";
	}

	public long getElapstime() {
		return elapstime;
	}

	public void setElapstime(long elapstime) {
		this.elapstime = elapstime;
	}


	@SuppressWarnings("deprecation")
	@Override
	public int compareTo(Event e) {
		if (this.getTimestamp().getYear() != e.getTimestamp().getYear()) 
	        return this.getTimestamp().getYear() - e.getTimestamp().getYear();
	    if (this.getTimestamp().getMonth() != e.getTimestamp().getMonth()) 
	        return this.getTimestamp().getMonth() - e.getTimestamp().getMonth();
	    return this.getTimestamp().getDate() - e.getTimestamp().getDate();
	}

	
	
}
]]></snapshot>
  </Command>
  <Command __id="23" _type="MoveCaretCommand" caretOffset="0" docOffset="0" timestamp="1199486" />
  <Command __id="24" _type="SelectTextCommand" caretOffset="394" docEnd="524" docOffset="394" docStart="394" end="524" start="394" timestamp="1205284" />
  <DocumentChange __id="25" _type="Delete" docASTNodeCount="236" docActiveCodeLength="1341" docExpressionCount="152" docLength="1388" endLine="23" length="130" offset="394" startLine="16" timestamp="1206217">
    <text><![CDATA[
	
//	public String getCaseId() {
//		return caseId;
//	}
//	public void setCaseId(String caseId) {
//		this.caseId = caseId;
//	}]]></text>
  </DocumentChange>
  <Command __id="26" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" timestamp="1206254" />
  <DocumentChange __id="27" _type="Insert" docASTNodeCount="236" docActiveCodeLength="1343" docExpressionCount="152" docLength="1390" length="2" offset="394" timestamp="1207683">
    <text><![CDATA[
	]]></text>
  </DocumentChange>
  <Command __id="28" _type="InsertStringCommand" timestamp="1207736">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="29" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" timestamp="1208655" />
  <Command __id="30" _type="SelectTextCommand" caretOffset="277" docEnd="303" docOffset="277" docStart="277" end="303" start="277" timestamp="1211101" />
  <DocumentChange __id="31" _type="Delete" docASTNodeCount="236" docActiveCodeLength="1340" docExpressionCount="152" docLength="1364" endLine="12" length="26" offset="277" startLine="11" timestamp="1211430">
    <text><![CDATA[
		//this.caseId = caseId;]]></text>
  </DocumentChange>
  <Command __id="32" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" timestamp="1211451" />
  <Command __id="33" _type="SelectTextCommand" caretOffset="108" docEnd="134" docOffset="108" docStart="108" end="134" start="108" timestamp="1214252" />
  <DocumentChange __id="34" _type="Delete" docASTNodeCount="236" docActiveCodeLength="1338" docExpressionCount="152" docLength="1338" endLine="6" length="26" offset="108" startLine="5" timestamp="1214630">
    <text><![CDATA[
	//private String caseId;]]></text>
  </DocumentChange>
  <Command __id="35" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" timestamp="1214647" />
  <Command __id="36" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" timestamp="1216989" />
  <Command __id="37" _type="InsertStringCommand" timestamp="1234582">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="38" _type="InsertStringCommand" timestamp="1324622">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="39" _type="FileOpenCommand" docASTNodeCount="309" docActiveCodeLength="1935" docExpressionCount="177" docLength="2165" projectName="espionage" timestamp="1326096">
    <filePath><![CDATA[/Users/user/Documents/workspace/dev/espionage/plugin/espionage/src/edu/cwi/espionage/util/CSVUtils.java]]></filePath>
  </Command>
  <Command __id="40" _type="MoveCaretCommand" caretOffset="0" docOffset="0" timestamp="1326177" />
  <Command __id="41" _type="FileOpenCommand" docASTNodeCount="690" docActiveCodeLength="3806" docExpressionCount="403" docLength="4383" projectName="espionage" timestamp="1328856">
    <filePath><![CDATA[/Users/user/Documents/workspace/dev/espionage/plugin/espionage/src/edu/cwi/espionage/model/ProcessCase.java]]></filePath>
    <snapshot><![CDATA[package edu.cwi.espionage.model;

import java.util.ArrayList;
import java.util.List;

import edu.cwi.espionage.util.DateManipulator;
import edu.cwi.espionage.util.IdleTimeTable;
import edu.cwi.espionage.util.Utils;

public class ProcessCase implements Comparable<ProcessCase>, Cloneable{
	private static final long MINIMUM_IDLE_TIME = 600000; //10 minutes as default.
	private String caseId;
	private List<Event> events;
	private long startTime;
	private long idleTime;
	private Event lastEvent;
	private IdleTimeTable idleTimeTable;
	
	public ProcessCase(String caseId) {
		this.events = new ArrayList<Event>();
		this.setCaseId(caseId);
		this.setIdleTimeTable(new IdleTimeTable());
	}

	public String getCaseId() {
		return caseId;
	}

	public void setCaseId(String caseId) {
		this.caseId = caseId;
	}

	public List<Event> getEvents() {
		return events;
	}

	public void setEvents(List<Event> events) {
		this.events = events;
	}
	
	public void addEvents(Event event) {
		this.events.add(event);
	}

	public long getIdleTime() {
		return idleTime;
	}

	public void setIdleTime(long idleTime) {
		this.idleTime = idleTime;
	}

	public long getDateTotalTime() {
		Long processTime = new Long(0);
		for (Event event : events) {
			processTime += event.getElapstime();
//			System.out.println("processTime => "+processTime);
		}
		return DateManipulator.diff(processTime,getIdleTime()) * 1000;
	}
	
	public long getTotalIdleTime() {
		return getIdleTimeTable().total();
	}
	
	public long getTotalTime() {
		long total = new Long(0);
		for (ProcessCase p : getByDate()) {
			total +=p.getDateTotalTime();
			
		}
		return total;
	}
	
	public List<ProcessCase> getByDate() {
		List<ProcessCase> pc = new ArrayList<>();
		List<Event> eventsTemp = new ArrayList<>(events);
		while (!eventsTemp.isEmpty()) {
			Event topEvent = eventsTemp.get(0);
			ProcessCase pcTemp = new ProcessCase(getCaseId());
			for (Event e : events) {
				if(topEvent.compareTo(e) == 0){
					if(pcTemp.getEvents().isEmpty()){
						pcTemp.setStartTime(e.getTimestamp().getTime()/1000);
					}
					else{
						calculateIdleTime(pcTemp, e);
						
					}
					pcTemp.addEvents(e);
					pcTemp.setLastEvent(e);
					eventsTemp.remove(e);
				}
			}
			String formatedDate = DateManipulator.getFormatedDate(pcTemp.getLastEvent().getTimestamp(), "dd/MM/yyyy");
			Long lookupIdleTime = this.getIdleTimeTable().lookupIdleTime(formatedDate);
			pcTemp.setIdleTime(lookupIdleTime);
			pc.add(pcTemp);
		}
		return pc;
	}

	private void calculateIdleTime(ProcessCase pcTemp, Event e) {
		Event event2 = pcTemp.getEvents().get(pcTemp.getEvents().size()-1);
		if (IsInactive(event2, e)) {
			long idleTime = getInactiveTime(e, event2);
			pcTemp.getIdleTimeTable().add(DateManipulator.getFormatedDate(e.getTimestamp(), "dd/MM/yyyy"),idleTime);
		}
	}
	
	/**
	 * To calculate inactive time:
	 * CONTEXT: The fluorite log all developers events. 
	 * METHOD : Visualizing Developer Interactions by  Roberto Minelli, Andrea Mocci, Michele Lanza and Lorenzo Baracchi
	 * 			idle time = event2 - event1 => if idle time is more than “minimum  idle  time (10 minutes)”, Then it suggest
	 * 			that the user is inactive.
	 * {@link http://conferences.computer.org/vissoft/2014/papers/6150a147.pdf } 
	 * @param Event e1
	 * @param Event e2
	 * 
	 * @return
	 */
	private long getInactiveTime(Event e1, Event e2){
		return Math.abs(e2.getTimestamp().getTime() - e1.getTimestamp().getTime());
	}
	
	private boolean IsInactive(Event e1, Event e2){
		boolean isInactive = false;
		if(getInactiveTime(e1,e2) > MINIMUM_IDLE_TIME){
			isInactive = true;
		}
		return isInactive;
	}
	
	@Override
	public String toString() {
		return Utils.getClassName(getCaseId(), "/");
	}

	public Event getLastEvent() {
		return lastEvent;
	}

	public void setLastEvent(Event e) {
		this.lastEvent = e;
	}

	public long getStartTime() {
		return startTime;
	}

	public void setStartTime(long startTime) {
		this.startTime = startTime;
	}

	public IdleTimeTable getIdleTimeTable() {
		return idleTimeTable;
	}

	public void setIdleTimeTable(IdleTimeTable idleTimeTable) {
		this.idleTimeTable = idleTimeTable;
	}

	@Override
	public int compareTo(ProcessCase p) {
		long ans = p.getTotalTime() - this.getTotalTime() ;
		return new Long(ans).intValue();
	}
	
	public Object clone()throws CloneNotSupportedException{  
		return super.clone();  
	}
	
	
}
]]></snapshot>
  </Command>
  <Command __id="42" _type="MoveCaretCommand" caretOffset="0" docOffset="0" timestamp="1329078" />
  <Command __id="43" _type="SelectTextCommand" caretOffset="1115" docEnd="1324" docOffset="1268" docStart="1268" end="1171" start="1115" timestamp="1334188" />
  <DocumentChange __id="44" _type="Delete" docASTNodeCount="690" docActiveCodeLength="3805" docExpressionCount="403" docLength="4327" endLine="56" length="56" offset="1268" startLine="55" timestamp="1334620">
    <text><![CDATA[
//			System.out.println("processTime => "+processTime);]]></text>
  </DocumentChange>
  <Command __id="45" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" timestamp="1334646" />
  <Command __id="46" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" timestamp="1336033" />
  <Command __id="47" _type="InsertStringCommand" timestamp="1345902">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="48" _type="FileOpenCommand" docASTNodeCount="895" docActiveCodeLength="5390" docExpressionCount="626" docLength="5618" projectName="espionage" timestamp="1363840">
    <filePath><![CDATA[/Users/user/Documents/workspace/dev/espionage/plugin/espionage/src/edu/cwi/espionage/util/FlouriteXMLParser.java]]></filePath>
    <snapshot><![CDATA[package edu.cwi.espionage.util;

import java.io.File;
import java.io.IOException;
import java.time.Instant;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.CharacterData;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import edu.cwi.espionage.model.Event;
import edu.cwi.espionage.model.ProcessCase;

public class FlouriteXMLParser extends FileParser {

	private static final String FLUORITE_LOGS_PATH = "/.metadata/.plugins/edu.cmu.scs.fluorite/Logs/";
	private String[] files;

	public FlouriteXMLParser() {
		// create a file that is really a directory
	    File aDirectory = new File(Utils.getFullPath(FLUORITE_LOGS_PATH));
		this.files = aDirectory.list();

	}
	@Override
	public Map<String, HashMap<String, ProcessCase>> getProject() {
		Map<String, HashMap<String, ProcessCase>> projects = new HashMap<String, HashMap<String, ProcessCase>>();
		if(this.files == null){
			return projects;
		}
		HashMap<String, ProcessCase> cases = null;
		for (int n = 0; n < this.files.length; n++) {
			String aLogFile = Utils.getFullPath(this.files[n], FLUORITE_LOGS_PATH);
			System.out.println(aLogFile);
			try {
				
				Document document = this.getDocument(aLogFile);
				Element eventsElem = document.getDocumentElement();
				if (!eventsElem.hasAttribute("startTimestamp")) {
					continue;
				}
				String startTime = eventsElem.getAttribute("startTimestamp").substring(0, 10);

				NodeList commands = document.getElementsByTagName("Command");
				ProcessCase processCase = null;
				String projectName = "";
				for (int i = 0; i < commands.getLength(); i++) {
					Node aNode = commands.item(i);
					String caseId = "";
					if (aNode.hasChildNodes()) {
						NodeList comCh = aNode.getChildNodes();
						Node cNode = comCh.item(1);
						if (cNode.getNodeType() == Node.ELEMENT_NODE) {
							Element ceNode = (Element) cNode;
							Element comChElem = (Element) comCh;
							caseId = Utils.getClassName(getCharacterDataFromElement(ceNode), "/");
							if (caseId.compareTo("") != 0) {
								long ts = Long.parseLong(comChElem.getAttribute("timestamp"));
								long initDate = Long.parseLong(startTime);
								long currDate = edu.cwi.espionage.util.DateManipulator.add(initDate, ts);
								projectName = comChElem.getAttribute("projectName");
								if (projects.containsKey(projectName)) {
									cases = projects.get(projectName);
								} else {
									cases = new HashMap<String, ProcessCase>();
								}
								
								if (projects.containsKey(projectName)
										&& projects.get(projectName).containsKey(caseId)) {
									
									processCase = projects.get(projectName).get(caseId);
									cases = projects.get(projectName);
									long nDate = processCase.getLastEvent().getTimestamp().getTime()/1000;
									long idleTime = DateManipulator.diff(nDate, currDate);
									long incrIdleTime = DateManipulator.add(processCase.getIdleTime(), idleTime);
									processCase.getIdleTimeTable().add(DateManipulator.getFormatedDate(Date.from(Instant.ofEpochSecond(currDate)), "dd/MM/yyyy"),idleTime);
									processCase.setIdleTime(incrIdleTime);
								} else {
									long idleTime = DateManipulator.diff(initDate, currDate);
									processCase = new ProcessCase(caseId);
									processCase.setStartTime(initDate);
									processCase.setIdleTime(idleTime);
									processCase.getIdleTimeTable().add(DateManipulator.getFormatedDate(Date.from(Instant.ofEpochSecond(initDate)), "dd/MM/yyyy"), new Long("0"));
								}
//								processCase.setLastEventTime(currDate);
								System.out.println(caseId);
							}
						}
					}

					if (aNode.getNodeType() == Node.ELEMENT_NODE && processCase != null) {
						Element theNode = (Element) aNode;
						String activity = theNode.getAttribute("_type");

						if (activity.contains("ShellBoundsCommand")) {
							continue;
						}
						String timestamp = theNode.getAttribute("timestamp");
						long epochSecond = (Long.parseLong(timestamp) + Long.parseLong(startTime));
						Date processTimestamp = Date.from(Instant.ofEpochSecond(epochSecond));
						Event event = new Event(processTimestamp, Long.parseLong(timestamp), activity);
						processCase.addEvents(event);
						processCase.setLastEvent(event);
						cases.put(processCase.getCaseId(), processCase);
						projects.put(projectName, cases);

					}

				}
			} catch (ParserConfigurationException e1) {
				e1.printStackTrace();
			} catch (SAXException e1) {
				e1.printStackTrace();
			} catch (IOException e1) {
				e1.printStackTrace();
			}

		}
		return projects;
	}

	private Document getDocument(String file) throws ParserConfigurationException, SAXException, IOException {

		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		DocumentBuilder builder = factory.newDocumentBuilder();

		// Load the input XML document, parse it and return an instance of the
		// Document class.
		Document document = builder.parse(new File(file));
		return document;
	}

	private String getCharacterDataFromElement(Element e) {
		// TODO Remove pathname and make it more generic
		String filePath = e.getNodeName();
		if (filePath.compareTo("filePath") != 0) {
			return "";
		}
		Node child = e.getFirstChild();
		if (child instanceof CharacterData) {
			CharacterData cd = (CharacterData) child;
			return cd.getData();
		}
		return "";
	}
	

}
]]></snapshot>
  </Command>
  <Command __id="49" _type="MoveCaretCommand" caretOffset="0" docOffset="0" timestamp="1364111" />
  <Command __id="50" _type="MoveCaretCommand" caretOffset="419" docOffset="950" timestamp="1394879" />
  <Command __id="51" _type="MoveCaretCommand" caretOffset="416" docOffset="947" timestamp="1570236" />
  <Command __id="52" _type="SelectTextCommand" caretOffset="209" docEnd="950" docOffset="740" docStart="740" end="419" start="209" timestamp="1579892" />
  <Command __id="53" _type="CopyCommand" timestamp="1580346" />
  <Command __id="54" _type="FileOpenCommand" docASTNodeCount="51" docActiveCodeLength="236" docExpressionCount="33" docLength="236" projectName="espionage" timestamp="1582649">
    <filePath><![CDATA[/Users/user/Documents/workspace/dev/espionage/plugin/espionage/src/edu/cwi/espionage/util/FileParser.java]]></filePath>
    <snapshot><![CDATA[package edu.cwi.espionage.util;

import java.util.HashMap;
import java.util.Map;
import edu.cwi.espionage.model.ProcessCase;

public abstract class FileParser {
	public abstract Map<String, HashMap<String, ProcessCase>> getProject();
}
]]></snapshot>
  </Command>
  <Command __id="55" _type="SelectTextCommand" caretOffset="92" docEnd="158" docOffset="158" docStart="148" end="92" start="82" timestamp="1582842" />
  <Command __id="56" _type="MoveCaretCommand" caretOffset="94" docOffset="160" timestamp="1589100" />
  <DocumentChange __id="57" _type="Insert" docASTNodeCount="51" docActiveCodeLength="238" docExpressionCount="33" docLength="238" length="2" offset="160" timestamp="1591320">
    <text><![CDATA[
	]]></text>
  </DocumentChange>
  <Command __id="58" _type="InsertStringCommand" timestamp="1591341">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="59" _type="Insert" docASTNodeCount="51" docActiveCodeLength="238" docExpressionCount="33" docLength="238" length="210" offset="162" timestamp="1592416">
    <text><![CDATA[private String[] files;

	public FlouriteXMLParser() {
		// create a file that is really a directory
	    File aDirectory = new File(Utils.getFullPath(FLUORITE_LOGS_PATH));
		this.files = aDirectory.list();

	}]]></text>
  </DocumentChange>
  <DocumentChange __id="60" _type="Insert" docASTNodeCount="82" docActiveCodeLength="406" docExpressionCount="51" docLength="449" length="1" offset="33" timestamp="1592729">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <DocumentChange __id="61" _type="Insert" docASTNodeCount="88" docActiveCodeLength="426" docExpressionCount="56" docLength="469" length="20" offset="33" timestamp="1592730">
    <text><![CDATA[import java.io.File;]]></text>
  </DocumentChange>
  <Command __id="62" _type="PasteCommand" timestamp="1592885" />
  <Command __id="63" _type="MoveCaretCommand" caretOffset="81" docOffset="173" timestamp="1597134" />
  <Command __id="64" _type="SelectTextCommand" caretOffset="87" docEnd="179" docOffset="179" docStart="169" end="87" start="77" timestamp="1597289" />
  <Command __id="65" _type="CopyCommand" timestamp="1597892" />
  <Command __id="66" _type="MoveCaretCommand" caretOffset="130" docOffset="222" timestamp="1599201" />
  <Command __id="67" _type="SelectTextCommand" caretOffset="141" docEnd="233" docOffset="233" docStart="216" end="141" start="124" timestamp="1599332" />
  <DocumentChange __id="68" _type="Replace" docASTNodeCount="88" docActiveCodeLength="419" docExpressionCount="56" docLength="462" endLine="10" insertionLength="9" int_docASTNodeCount="88" int_docActiveCodeLength="410" int_docExpressionCount="56" int_docLength="453" length="16" offset="217" startLine="10" timestamp="1599569">
    <deletedText><![CDATA[louriteXMLParser]]></deletedText>
    <insertedText><![CDATA[ileParser]]></insertedText>
  </DocumentChange>
  <Command __id="69" _type="PasteCommand" timestamp="1599577" />
  <Command __id="70" _type="SelectTextCommand" caretOffset="92" docEnd="190" docOffset="184" docStart="184" end="98" start="92" timestamp="1607339" />
  <DocumentChange __id="71" _type="Replace" docASTNodeCount="86" docActiveCodeLength="415" docExpressionCount="56" docLength="458" endLine="8" insertionLength="2" int_docASTNodeCount="86" int_docActiveCodeLength="413" int_docExpressionCount="56" int_docLength="456" length="6" offset="184" repeat="2" startLine="8" timestamp="1609625" timestamp2="1610511">
    <deletedText><![CDATA[rivate]]></deletedText>
    <insertedText><![CDATA[ub]]></insertedText>
  </DocumentChange>
  <Command __id="72" _type="InsertStringCommand" repeat="2" timestamp="1609640" timestamp2="1610525">
    <data><![CDATA[ub]]></data>
  </Command>
  <Command __id="75" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" start_end="START" timestamp="1615880" />
  <Command __id="76" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.contentAssist.proposals" timestamp="1617744" />
  <DocumentChange __id="77" _type="Insert" docASTNodeCount="86" docActiveCodeLength="416" docExpressionCount="56" docLength="459" length="1" offset="186" timestamp="1620913">
    <text><![CDATA[b]]></text>
  </DocumentChange>
  <Command __id="78" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" start_end="END" timestamp="1620961" />
  <DocumentChange __id="79" _type="Delete" docASTNodeCount="86" docActiveCodeLength="415" docExpressionCount="56" docLength="458" endLine="8" length="1" offset="186" startLine="8" timestamp="1622036">
    <text><![CDATA[b]]></text>
  </DocumentChange>
  <Command __id="80" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" timestamp="1622042" />
  <DocumentChange __id="81" _type="Insert" docASTNodeCount="88" docActiveCodeLength="418" docExpressionCount="56" docLength="461" length="3" offset="186" repeat="3" timestamp="1622278" timestamp2="1622758">
    <text><![CDATA[lic]]></text>
  </DocumentChange>
  <Command __id="82" _type="InsertStringCommand" repeat="3" timestamp="1622290" timestamp2="1622769">
    <data><![CDATA[lic]]></data>
  </Command>
  <Command __id="87" _type="MoveCaretCommand" caretOffset="134" docOffset="226" timestamp="1627810" />
  <DocumentChange __id="88" _type="Insert" docASTNodeCount="72" docActiveCodeLength="422" docExpressionCount="44" docLength="465" length="4" offset="226" repeat="4" timestamp="1641148" timestamp2="1641699">
    <text><![CDATA[file]]></text>
  </DocumentChange>
  <Command __id="89" _type="InsertStringCommand" repeat="4" timestamp="1641163" timestamp2="1641713">
    <data><![CDATA[file]]></data>
  </Command>
  <DocumentChange __id="96" _type="Delete" docASTNodeCount="88" docActiveCodeLength="418" docExpressionCount="56" docLength="461" endLine="10" length="4" offset="226" repeat="4" startLine="10" timestamp="1642832" timestamp2="1643455">
    <text><![CDATA[file]]></text>
  </DocumentChange>
  <Command __id="97" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" repeat="4" timestamp="1642837" timestamp2="1643461" />
  <DocumentChange __id="104" _type="Insert" docASTNodeCount="92" docActiveCodeLength="429" docExpressionCount="58" docLength="472" length="11" offset="226" repeat="11" timestamp="1644121" timestamp2="1648238">
    <text><![CDATA[String file]]></text>
  </DocumentChange>
  <Command __id="105" _type="InsertStringCommand" repeat="11" timestamp="1644135" timestamp2="1648248">
    <data><![CDATA[String file]]></data>
  </Command>
  <DocumentChange __id="126" _type="Delete" docASTNodeCount="72" docActiveCodeLength="425" docExpressionCount="44" docLength="468" endLine="10" length="4" offset="233" repeat="4" startLine="10" timestamp="1650351" timestamp2="1650849">
    <text><![CDATA[file]]></text>
  </DocumentChange>
  <Command __id="127" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" repeat="4" timestamp="1650356" timestamp2="1650865" />
  <DocumentChange __id="134" _type="Insert" docASTNodeCount="92" docActiveCodeLength="432" docExpressionCount="58" docLength="475" length="7" offset="233" repeat="7" timestamp="1651367" timestamp2="1653806">
    <text><![CDATA[logPath]]></text>
  </DocumentChange>
  <Command __id="135" _type="InsertStringCommand" repeat="7" timestamp="1651397" timestamp2="1653817">
    <data><![CDATA[logPath]]></data>
  </Command>
  <Command __id="148" _type="MoveCaretCommand" caretOffset="143" docOffset="235" timestamp="1656234" />
  <Command __id="149" _type="SelectTextCommand" caretOffset="148" docEnd="240" docOffset="240" docStart="233" end="148" start="141" timestamp="1656378" />
  <Command __id="150" _type="CopyCommand" timestamp="1656657" />
  <Command __id="151" _type="MoveCaretCommand" caretOffset="254" docOffset="346" timestamp="1657698" />
  <Command __id="152" _type="SelectTextCommand" caretOffset="266" docEnd="358" docOffset="358" docStart="340" end="266" start="248" timestamp="1657853" />
  <DocumentChange __id="153" _type="Replace" docASTNodeCount="92" docActiveCodeLength="421" docExpressionCount="58" docLength="464" endLine="12" insertionLength="7" int_docASTNodeCount="91" int_docActiveCodeLength="414" int_docExpressionCount="57" int_docLength="457" length="18" offset="340" startLine="12" timestamp="1658851">
    <deletedText><![CDATA[FLUORITE_LOGS_PATH]]></deletedText>
    <insertedText><![CDATA[logPath]]></insertedText>
  </DocumentChange>
  <Command __id="154" _type="PasteCommand" timestamp="1658862" />
  <Command __id="155" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" timestamp="1662890" />
  <Command __id="156" _type="MoveCaretCommand" caretOffset="293" docOffset="385" timestamp="1693229" />
  <Command __id="157" _type="InsertStringCommand" timestamp="1694183">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="158" _type="FileOpenCommand" docASTNodeCount="895" docActiveCodeLength="5390" docExpressionCount="626" docLength="5618" projectName="espionage" timestamp="1695914">
    <filePath><![CDATA[/Users/user/Documents/workspace/dev/espionage/plugin/espionage/src/edu/cwi/espionage/util/FlouriteXMLParser.java]]></filePath>
  </Command>
  <Command __id="159" _type="MoveCaretCommand" caretOffset="98" docOffset="629" timestamp="1696218" />
  <Command __id="160" _type="SelectTextCommand" caretOffset="266" docEnd="946" docOffset="797" docStart="797" end="415" start="266" timestamp="1714746" />
  <DocumentChange __id="161" _type="Replace" docASTNodeCount="877" docActiveCodeLength="5286" docExpressionCount="612" docLength="5471" endLine="28" insertionLength="2" int_docASTNodeCount="875" int_docActiveCodeLength="5284" int_docExpressionCount="611" int_docLength="5469" length="149" offset="797" repeat="2" startLine="26" timestamp="1715213" timestamp2="1715387">
    <deletedText><![CDATA[// create a file that is really a directory
	    File aDirectory = new File(Utils.getFullPath(FLUORITE_LOGS_PATH));
		this.files = aDirectory.list();]]></deletedText>
    <insertedText><![CDATA[su]]></insertedText>
  </DocumentChange>
  <Command __id="162" _type="InsertStringCommand" repeat="2" timestamp="1715278" timestamp2="1715411">
    <data><![CDATA[su]]></data>
  </Command>
  <Command __id="165" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" start_end="START" timestamp="1716220" />
  <Command __id="166" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.contentAssist.proposals" timestamp="1716497" />
  <Command __id="167" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" start_end="END" timestamp="1718876" />
  <DocumentChange __id="168" _type="Insert" docASTNodeCount="877" docActiveCodeLength="5286" docExpressionCount="612" docLength="5471" length="12" offset="799" timestamp="1718889">
    <text><![CDATA[per(logPath)]]></text>
  </DocumentChange>
  <Command __id="169" _type="InsertStringCommand" timestamp="1718993">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="170" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" timestamp="1719939" />
  <DocumentChange __id="171" _type="Replace" docASTNodeCount="877" docActiveCodeLength="5309" docExpressionCount="612" docLength="5494" endLine="26" insertionLength="18" int_docASTNodeCount="876" int_docActiveCodeLength="5291" int_docExpressionCount="611" int_docLength="5476" length="7" offset="803" startLine="26" timestamp="1720516">
    <deletedText><![CDATA[logPath]]></deletedText>
    <insertedText><![CDATA[FLUORITE_LOGS_PATH]]></insertedText>
  </DocumentChange>
  <Command __id="172" _type="InsertStringCommand" timestamp="1720532">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="173" _type="Insert" docASTNodeCount="877" docActiveCodeLength="5310" docExpressionCount="612" docLength="5495" length="1" offset="822" timestamp="1723118">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <Command __id="174" _type="InsertStringCommand" timestamp="1723130">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="175" _type="SelectTextCommand" caretOffset="207" docEnd="763" docOffset="738" docStart="738" end="232" start="207" timestamp="1730428" />
  <DocumentChange __id="176" _type="Delete" docASTNodeCount="870" docActiveCodeLength="5285" docExpressionCount="610" docLength="5470" endLine="23" length="25" offset="738" startLine="22" timestamp="1731082">
    <text><![CDATA[
	private String[] files;]]></text>
  </DocumentChange>
  <Command __id="177" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" timestamp="1731093" />
  <Command __id="178" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" timestamp="1733480" />
  <Command __id="179" _type="FileOpenCommand" docASTNodeCount="92" docActiveCodeLength="421" docExpressionCount="58" docLength="464" projectName="espionage" timestamp="1745882">
    <filePath><![CDATA[/Users/user/Documents/workspace/dev/espionage/plugin/espionage/src/edu/cwi/espionage/util/FileParser.java]]></filePath>
  </Command>
  <Command __id="180" _type="SelectTextCommand" caretOffset="112" docEnd="204" docOffset="204" docStart="199" end="112" start="107" timestamp="1745981" />
  <Command __id="181" _type="MoveCaretCommand" caretOffset="296" docOffset="388" timestamp="1750694" />
  <DocumentChange __id="182" _type="Insert" docASTNodeCount="92" docActiveCodeLength="423" docExpressionCount="58" docLength="466" length="2" offset="388" timestamp="1751564">
    <text><![CDATA[
	]]></text>
  </DocumentChange>
  <Command __id="183" _type="InsertStringCommand" timestamp="1751590">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="184" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" timestamp="1752750" />
  <Command __id="185" _type="InsertStringCommand" timestamp="1762947">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="186" _type="FileOpenCommand" docASTNodeCount="642" docActiveCodeLength="3624" docExpressionCount="447" docLength="3672" projectName="espionage" timestamp="1768564">
    <filePath><![CDATA[/Users/user/Documents/workspace/dev/espionage/plugin/espionage/src/edu/cwi/espionage/util/MimecCSVParser.java]]></filePath>
    <snapshot><![CDATA[package edu.cwi.espionage.util;

import java.io.File;
import java.io.FileNotFoundException;
import java.time.Instant;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

import edu.cwi.espionage.model.Event;
import edu.cwi.espionage.model.ProcessCase;

public class MimecCSVParser extends FileParser {
	
	private static final String MIMEC_LOGS_PATH = "/.metadata/.plugins/mimec/";
	private String[] files;

	public MimecCSVParser() {
		// create a file that is really a directory
		File aDirectory = new File(Utils.getFullPath(MIMEC_LOGS_PATH));
		this.files = aDirectory.list();
	}

	@Override
	public Map<String, HashMap<String, ProcessCase>> getProject() {
		Map<String, HashMap<String, ProcessCase>> projects = new HashMap<String, HashMap<String, ProcessCase>>();

		HashMap<String, ProcessCase> cases = null;
		for (int n = 0; n < this.files.length; n++) {
			String aLogFile = Utils.getFullPath(this.files[n], MIMEC_LOGS_PATH);
			Scanner scanner = null;
			try {
				scanner = new Scanner(new File(aLogFile));
				while (scanner.hasNext()) {
					List<String> line = CSVUtils.parseLine(scanner.nextLine());
					String date = line.get(1).substring(7);
					String typeKind = line.get(2).substring(6).trim();
					String caseId = Utils.regexChecker("\\{\\w+\\.java", line.get(3)).replace("{", "");
					String projectName = getProjectName(line.get(3));
					ProcessCase processCase = null;
					if (!caseId.isEmpty() && !projectName.isEmpty()) {
						cases = getProjectCase(projects, projectName);

						long fDate = (DateManipulator.getDateFromString(date, "EEE MMM dd HH:mm:ss Z yyyy").getTime() / 1000);
						if (projects.containsKey(projectName) && projects.get(projectName).containsKey(caseId)) {

							processCase = projects.get(projectName).get(caseId);
							cases = projects.get(projectName);
							long nDate = processCase.getLastEvent().getTimestamp().getTime()/1000;
							long idleTime = DateManipulator.diff(nDate, fDate);
							long incrIdleTime = DateManipulator.add(processCase.getIdleTime(), idleTime);
							processCase.setIdleTime(incrIdleTime);
							///
							processCase.getIdleTimeTable().add(DateManipulator.getFormatedDate(Date.from(Instant.ofEpochSecond(fDate)), "dd/MM/yyyy"),idleTime);
							
						} else {
							processCase = new ProcessCase(caseId);
							processCase.setStartTime(fDate);
							processCase.setIdleTime(0);
							//
							processCase.getIdleTimeTable().add(DateManipulator.getFormatedDate(Date.from(Instant.ofEpochSecond(fDate)), "dd/MM/yyyy"), new Long("0"));
						}
						

						long elapstime = DateManipulator.diff(processCase.getStartTime(), fDate) * 1000;
						Event event = new Event(Date.from(Instant.ofEpochSecond(fDate)), elapstime, typeKind);
						processCase.addEvents(event);
						processCase.setLastEvent(event);
						cases.put(processCase.getCaseId(), processCase);
						projects.put(projectName, cases);
					}

				}

			} catch (FileNotFoundException e) {
				e.printStackTrace();
			} finally {
				if (scanner != null) {
					scanner.close();
				}
			}
		}

		return projects;
	}

	private HashMap<String, ProcessCase> getProjectCase(Map<String, HashMap<String, ProcessCase>> projects,
			String projectName) {
		HashMap<String, ProcessCase> cases;
		if (projects.containsKey(projectName)) {
			cases = projects.get(projectName);
		} else {
			cases = new HashMap<String, ProcessCase>();
		}
		return cases;
	}

	public String getProjectName(String line) {
		String pNameRaw = Utils.regexChecker("no(.*?)\\{", line).replace("{", "");
		return pNameRaw != "" ? pNameRaw.split("\\.")[1] : pNameRaw;
	}

}
]]></snapshot>
  </Command>
  <Command __id="187" _type="MoveCaretCommand" caretOffset="0" docOffset="0" timestamp="1768866" />
  <Command __id="188" _type="SelectTextCommand" caretOffset="235" docEnd="648" docOffset="502" docStart="502" end="381" start="235" timestamp="1774582" />
  <DocumentChange __id="189" _type="Delete" docASTNodeCount="622" docActiveCodeLength="3521" docExpressionCount="432" docLength="3526" endLine="22" length="146" offset="502" startLine="19" timestamp="1774989">
    <text><![CDATA[
		// create a file that is really a directory
		File aDirectory = new File(Utils.getFullPath(MIMEC_LOGS_PATH));
		this.files = aDirectory.list();]]></text>
  </DocumentChange>
  <Command __id="190" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" timestamp="1775022" />
  <DocumentChange __id="191" _type="Insert" docASTNodeCount="622" docActiveCodeLength="3524" docExpressionCount="432" docLength="3529" length="3" offset="502" timestamp="1775353">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <Command __id="192" _type="InsertStringCommand" timestamp="1775376">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="193" _type="Insert" docASTNodeCount="624" docActiveCodeLength="3526" docExpressionCount="433" docLength="3531" length="14" offset="505" repeat="3" timestamp="1777133" timestamp2="1778461">
    <text><![CDATA[super(logPath)]]></text>
  </DocumentChange>
  <Command __id="194" _type="InsertStringCommand" repeat="2" timestamp="1777146" timestamp2="1777334">
    <data><![CDATA[su]]></data>
  </Command>
  <Command __id="197" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" start_end="START" timestamp="1777724" />
  <Command __id="198" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.contentAssist.proposals" timestamp="1777806" />
  <Command __id="199" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" start_end="END" timestamp="1778455" />
  <Command __id="201" _type="InsertStringCommand" timestamp="1778493">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="202" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" timestamp="1779506" />
  <DocumentChange __id="203" _type="Replace" docASTNodeCount="624" docActiveCodeLength="3546" docExpressionCount="433" docLength="3551" endLine="20" insertionLength="15" int_docASTNodeCount="623" int_docActiveCodeLength="3531" int_docExpressionCount="432" int_docLength="3536" length="7" offset="511" startLine="20" timestamp="1779881">
    <deletedText><![CDATA[logPath]]></deletedText>
    <insertedText><![CDATA[MIMEC_LOGS_PATH]]></insertedText>
  </DocumentChange>
  <Command __id="204" _type="InsertStringCommand" timestamp="1779892">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="205" _type="Insert" docASTNodeCount="624" docActiveCodeLength="3547" docExpressionCount="433" docLength="3552" length="1" offset="527" timestamp="1781252">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <Command __id="206" _type="InsertStringCommand" timestamp="1781264">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="207" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" timestamp="1784111" />
  <Command __id="208" _type="SelectTextCommand" caretOffset="182" docEnd="474" docOffset="449" docStart="449" end="207" start="182" timestamp="1801100" />
  <DocumentChange __id="209" _type="Delete" docASTNodeCount="617" docActiveCodeLength="3522" docExpressionCount="431" docLength="3527" endLine="17" length="25" offset="449" startLine="16" timestamp="1802171">
    <text><![CDATA[
	private String[] files;]]></text>
  </DocumentChange>
  <Command __id="210" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" timestamp="1802182" />
  <Command __id="211" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" timestamp="1804890" />
  <Command __id="212" _type="FileOpenCommand" docASTNodeCount="703" docActiveCodeLength="3931" docExpressionCount="492" docLength="4271" projectName="espionage" timestamp="1880586">
    <filePath><![CDATA[/Users/user/Documents/workspace/dev/espionage/plugin/espionage/src/edu/cwi/espionage/util/MylynCSVParser.java]]></filePath>
    <snapshot><![CDATA[package edu.cwi.espionage.util;

import java.io.File;
import java.io.FileNotFoundException;
import java.time.Instant;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

import edu.cwi.espionage.model.Event;
import edu.cwi.espionage.model.ProcessCase;

public class MylynCSVParser extends FileParser {
	
	private static final String MYLYN_LOGS_PATH = "/.metadata/.plugins/mylyn/VIT/";
	private String[] files;

	public MylynCSVParser() {
		// create a file that is really a directory
		File aDirectory = new File(Utils.getFullPath(MYLYN_LOGS_PATH));
		this.files = aDirectory.list();
	}

	@Override
	public Map<String, HashMap<String, ProcessCase>> getProject() {
		Map<String, HashMap<String, ProcessCase>> projects = new HashMap<String, HashMap<String, ProcessCase>>();
		if(files == null){
			return projects;
		}
		HashMap<String, ProcessCase> cases = null;
		for (int n = 0; n < this.files.length; n++) {
			String aLogFile = Utils.getFullPath(this.files[n], MYLYN_LOGS_PATH);
			Scanner scanner = null;
			try {
				scanner = new Scanner(new File(aLogFile));
				while (scanner.hasNext()) {
					List<String> line = CSVUtils.parseLine(scanner.nextLine(),';');
					if(line.size() < 3){
						continue;
					}
					if(line.get(4).contains("explorer")){
						continue;
					}
//					if(line.get(4).contains("editor")){
//						continue;
//					}
					String startDate = "2013-12-13 "+line.get(0);
					String endDate = "2013-12-13 "+line.get(1);
					
					long fDate = new Long(0);
					long fEndDate = new Long(0);
					
					String typeKind = line.get(6).trim();
					String caseId = Utils.regexChecker("\\{\\w+\\.java", line.get(2)).replace("{", "");
					String projectName = this.files[n].split("\\_")[0];
					if(caseId.isEmpty()){
						caseId = Utils.regexChecker("\\/\\w+\\.java", line.get(2)).replace("/", "");
					}
					ProcessCase processCase = null;
					if (!caseId.isEmpty() && !projectName.isEmpty()) {
						cases = getProjectCase(projects, projectName);

					    fDate = (DateManipulator.getDateFromString(startDate, "yyyy-MM-dd HH:mm:ss").getTime() / 1000);
					    fEndDate = (DateManipulator.getDateFromString(endDate, "yyyy-MM-dd HH:mm:ss").getTime() / 1000);
						if (projects.containsKey(projectName) && projects.get(projectName).containsKey(caseId)) {

							processCase = projects.get(projectName).get(caseId);
							cases = projects.get(projectName);
//							long nDate = processCase.getLastEvent().getTimestamp().getTime()/1000;
//							long idleTime = DateManipulator.diff(nDate, fDate);
//							long incrIdleTime = DateManipulator.add(processCase.getIdleTime(), idleTime);
							processCase.setIdleTime(new Long(0));
							///
							processCase.getIdleTimeTable().add(DateManipulator.getFormatedDate(Date.from(Instant.ofEpochSecond(fDate)), "dd/MM/yyyy"),new Long(0));
							
						} else {
							processCase = new ProcessCase(caseId);
							processCase.setStartTime(fDate);
							processCase.setIdleTime(0);
							//
							processCase.getIdleTimeTable().add(DateManipulator.getFormatedDate(Date.from(Instant.ofEpochSecond(fDate)), "dd/MM/yyyy"), new Long("0"));
						}
						

						long elapstime = DateManipulator.diff(fEndDate, fDate) ;
						Event event = new Event(Date.from(Instant.ofEpochSecond(fDate)), elapstime, typeKind);
						processCase.addEvents(event);
						processCase.setLastEvent(event);
						cases.put(processCase.getCaseId(), processCase);
						projects.put(projectName, cases);
					}

				}

			} catch (FileNotFoundException e) {
				e.printStackTrace();
			} finally {
				if (scanner != null) {
					scanner.close();
				}
			}
		}

		return projects;
	}

	private HashMap<String, ProcessCase> getProjectCase(Map<String, HashMap<String, ProcessCase>> projects,
			String projectName) {
		HashMap<String, ProcessCase> cases;
		if (projects.containsKey(projectName)) {
			cases = projects.get(projectName);
		} else {
			cases = new HashMap<String, ProcessCase>();
		}
		return cases;
	}

	public String getProjectName(String line) {
		String pNameRaw = Utils.regexChecker("org(.*?)\\.java", line).replace("/", ".");
		System.out.println(pNameRaw);
		return pNameRaw != "" ? pNameRaw.split("\\.")[1] : pNameRaw;
	}

}
]]></snapshot>
  </Command>
  <Command __id="213" _type="MoveCaretCommand" caretOffset="0" docOffset="0" timestamp="1880866" />
  <Command __id="214" _type="SelectTextCommand" caretOffset="242" docEnd="652" docOffset="509" docStart="509" end="385" start="242" timestamp="1885214" />
  <DocumentChange __id="215" _type="Replace" docASTNodeCount="685" docActiveCodeLength="3833" docExpressionCount="478" docLength="4130" endLine="22" insertionLength="14" int_docASTNodeCount="683" int_docActiveCodeLength="3831" int_docExpressionCount="477" int_docLength="4128" length="143" offset="509" repeat="3" startLine="20" timestamp="1885740" timestamp2="1887086">
    <deletedText><![CDATA[// create a file that is really a directory
		File aDirectory = new File(Utils.getFullPath(MYLYN_LOGS_PATH));
		this.files = aDirectory.list();]]></deletedText>
    <insertedText><![CDATA[super(logPath)]]></insertedText>
  </DocumentChange>
  <Command __id="216" _type="InsertStringCommand" repeat="2" timestamp="1885790" timestamp2="1885987">
    <data><![CDATA[su]]></data>
  </Command>
  <Command __id="219" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" start_end="START" timestamp="1886248" />
  <Command __id="220" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.contentAssist.proposals" timestamp="1886343" />
  <Command __id="221" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" start_end="END" timestamp="1887082" />
  <Command __id="223" _type="InsertStringCommand" timestamp="1887119">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="224" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" timestamp="1888172" />
  <DocumentChange __id="225" _type="Replace" docASTNodeCount="685" docActiveCodeLength="3853" docExpressionCount="478" docLength="4150" endLine="20" insertionLength="15" int_docASTNodeCount="684" int_docActiveCodeLength="3838" int_docExpressionCount="477" int_docLength="4135" length="7" offset="515" startLine="20" timestamp="1888498">
    <deletedText><![CDATA[logPath]]></deletedText>
    <insertedText><![CDATA[MYLYN_LOGS_PATH]]></insertedText>
  </DocumentChange>
  <Command __id="226" _type="InsertStringCommand" timestamp="1888513">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="227" _type="Insert" docASTNodeCount="685" docActiveCodeLength="3854" docExpressionCount="478" docLength="4151" length="1" offset="531" timestamp="1890081">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <Command __id="228" _type="InsertStringCommand" timestamp="1890092">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="229" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" timestamp="1892726" />
  <Command __id="230" _type="SelectTextCommand" caretOffset="2072" docEnd="2567" docOffset="2339" docStart="2339" end="2300" start="2072" timestamp="1900256" />
  <DocumentChange __id="231" _type="Delete" docASTNodeCount="685" docActiveCodeLength="3851" docExpressionCount="478" docLength="3923" endLine="70" length="228" offset="2339" startLine="67" timestamp="1901701">
    <text><![CDATA[
//							long nDate = processCase.getLastEvent().getTimestamp().getTime()/1000;
//							long idleTime = DateManipulator.diff(nDate, fDate);
//							long incrIdleTime = DateManipulator.add(processCase.getIdleTime(), idleTime);]]></text>
  </DocumentChange>
  <Command __id="232" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" timestamp="1901723" />
  <Command __id="233" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" timestamp="1909848" />
  <Command __id="234" _type="MoveCaretCommand" caretOffset="1032" docOffset="1299" timestamp="1921421" />
  <Command __id="235" _type="InsertStringCommand" timestamp="1959340">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="236" _type="MoveCaretCommand" caretOffset="1151" docOffset="1418" timestamp="1960305" />
  <Command __id="237" _type="FileOpenCommand" docASTNodeCount="1138" docActiveCodeLength="6754" docExpressionCount="811" docLength="7199" projectName="espionage" timestamp="1963082">
    <filePath><![CDATA[/Users/user/Documents/workspace/dev/espionage/plugin/espionage/src/edu/cwi/espionage/util/MylynXMLParser.java]]></filePath>
    <snapshot><![CDATA[package edu.cwi.espionage.util;

import java.io.File;
import java.io.IOException;
import java.time.Instant;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import edu.cwi.espionage.model.Event;
import edu.cwi.espionage.model.ProcessCase;

public class MylynXMLParser extends FileParser {

	private static final String MYLYN_LOGS_PATH = "/.metadata/.plugins/mylyn/Logs/";
	private String[] files;

	public MylynXMLParser() {
		// create a file that is really a directory
	    File aDirectory = new File(Utils.getFullPath(MYLYN_LOGS_PATH));
		this.files = aDirectory.list();

	}
	@Override
	public Map<String, HashMap<String, ProcessCase>> getProject() {
		Map<String, HashMap<String, ProcessCase>> projects = new HashMap<String, HashMap<String, ProcessCase>>();
		if(this.files == null){
			return projects;
		}
		HashMap<String, ProcessCase> cases = null;
		for (int n = 0; n < this.files.length; n++) {
			String aLogFile = Utils.getFullPath(this.files[n], MYLYN_LOGS_PATH);
			System.out.println(aLogFile);
			try {
				
				Document document = this.getDocument(aLogFile);

				NodeList commands = document.getElementsByTagName("InteractionEvent");
				
				for (int i = 0; i < commands.getLength(); i++) {
					Node aNode = commands.item(i);

					if (aNode.getNodeType() == Node.ELEMENT_NODE) {
						Element theNode = (Element) aNode;
//						if(theNode.getAttribute("OriginId").contains("PackageExplorer")){
//							continue;
//						}
						if(theNode.getAttribute("OriginId").contains("propagation")){
							continue;
						}
//						if(theNode.getAttribute("OriginId").contains("CompilationUnitEditor")){
//							continue;
//						}
						
						String startDate = theNode.getAttribute("StartDate");
						long fDate = (DateManipulator.getDateFromString(startDate, "yyyy-MM-dd HH:mm:ss.S Z").getTime() / 1000);
						String endDate = theNode.getAttribute("EndDate");
						long fEndDate = (DateManipulator.getDateFromString(endDate, "yyyy-MM-dd HH:mm:ss.S Z").getTime() / 1000);
						String typeKind = theNode.getAttribute("Kind");
						String caseId = Utils.regexChecker("\\{\\w+\\.java", theNode.getAttribute("StructureHandle")).replace("{", "");
						if(caseId.isEmpty()){
							caseId = Utils.regexChecker("\\/\\w+\\.java", theNode.getAttribute("StructureHandle")).replace("/", "");
						}
//						String projectName = getProjectName(theNode.getAttribute("StructureHandle"));
						String projectName = this.files[n].split("\\_")[0];
						ProcessCase processCase = null;
						
						if (!caseId.isEmpty() && !projectName.isEmpty()) {
							cases = getProjectCase(projects, projectName);
							
							if (projects.containsKey(projectName) && projects.get(projectName).containsKey(caseId)) {

								processCase = projects.get(projectName).get(caseId);
								cases = projects.get(projectName);
								long idleTime = getOverlap(processCase, Date.from(Instant.ofEpochSecond(fDate)),Date.from(Instant.ofEpochSecond(fEndDate)));
								processCase.getIdleTimeTable().add(DateManipulator.getFormatedDate(Date.from(Instant.ofEpochSecond(fDate)), "dd/MM/yyyy"),idleTime);
								
							} else {
								processCase = new ProcessCase(caseId);
								processCase.setStartTime(fDate);
								processCase.setIdleTime(0);
								//
								processCase.getIdleTimeTable().add(DateManipulator.getFormatedDate(Date.from(Instant.ofEpochSecond(fDate)), "dd/MM/yyyy"), new Long("0"));
							}
							
							
							long elapstime = DateManipulator.diff(fEndDate, fDate);
							Event event = new Event(Date.from(Instant.ofEpochSecond(fEndDate)), elapstime, typeKind);
							processCase.addEvents(event);
							processCase.setLastEvent(event);
							cases.put(processCase.getCaseId(), processCase);
							projects.put(projectName, cases);
							
						}

					}

				}
			} catch (ParserConfigurationException e1) {
				e1.printStackTrace();
			} catch (SAXException e1) {
				e1.printStackTrace();
			} catch (IOException e1) {
				e1.printStackTrace();
			}

		}
		return projects;
	}

	private Document getDocument(String file) throws ParserConfigurationException, SAXException, IOException {

		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		DocumentBuilder builder = factory.newDocumentBuilder();

		// Load the input XML document, parse it and return an instance of the
		// Document class.
		Document document = builder.parse(new File(file));
		return document;
	}
	
	public String getProjectName(String line) {
		String pNameRaw = Utils.regexChecker("org(.*?)\\.java", line).replace("/", ".");
		return pNameRaw != "" ? pNameRaw.split("\\.")[2] : pNameRaw;
	}
	
	private HashMap<String, ProcessCase> getProjectCase(Map<String, HashMap<String, ProcessCase>> projects,
			String projectName) {
		HashMap<String, ProcessCase> cases;
		if (projects.containsKey(projectName)) {
			cases = projects.get(projectName);
		} else {
			cases = new HashMap<String, ProcessCase>();
		}
		return cases;
	}
	
	private Long getOverlap(ProcessCase processCase, Date aStartDate, Date aEndDate){
		Long res = new Long(0);
		for (Event e : processCase.getEvents()) {
			Date eEndDate = e.getTimestamp();
			Long elapse = e.getElapstime();
			Date eStartDate = Date.from(Instant.ofEpochSecond((eEndDate.getTime()/1000) - elapse));
			if(elapse.equals(new Long(0))){
				continue;
			}
			//1
			if(aStartDate.equals(eStartDate) && aEndDate.before(eEndDate)){
				Long currentRes = DateManipulator.diff(aEndDate.getTime(), aStartDate.getTime())/1000;
				if(currentRes > res){
					res = currentRes;
				}
			}
			//2
			if(aStartDate.equals(eStartDate) && aEndDate.equals(eEndDate)){
				Long currentRes = elapse;
				if(currentRes > res){
					res = currentRes;
				}
			}
			//3
			if(aStartDate.after(eStartDate) && aEndDate.before(eEndDate)){
				Long currentRes = DateManipulator.diff(aEndDate.getTime(),aStartDate.getTime())/1000;
				 if(currentRes > res){
						res = currentRes;
					}
			}
			//4
			if(aStartDate.before(eStartDate) && aEndDate.before(eEndDate) && aEndDate.after(eStartDate)){
				Long currentRes = DateManipulator.diff(eStartDate.getTime(),aEndDate.getTime())/1000;
				 if(currentRes > res){
						res = currentRes;
					}
			}
			//5
			if(aStartDate.before(eStartDate) && aEndDate.equals(eEndDate)){
				Long currentRes = elapse;
				if(currentRes > res){
					res = currentRes;
				}
			}
			
			//6
			if(aStartDate.before(eStartDate) && aEndDate.after(eEndDate) ){
				Long currentRes = DateManipulator.diff(eStartDate.getTime(),eEndDate.getTime())/1000;
				if(currentRes > res){
					res = currentRes;
				}
			}
			
			//7
			if(aStartDate.after(eStartDate) && aEndDate.after(eEndDate) && aStartDate.before(eEndDate)){
				Long currentRes = DateManipulator.diff(eEndDate.getTime(),aStartDate.getTime())/1000;
			    if(currentRes > res){
					res = currentRes;
				}
			}
			
			
			
		}
		return res;
	}
	

	

}
]]></snapshot>
  </Command>
  <Command __id="238" _type="MoveCaretCommand" caretOffset="0" docOffset="0" timestamp="1963370" />
  <Command __id="239" _type="SelectTextCommand" caretOffset="242" docEnd="885" docOffset="739" docStart="739" end="388" start="242" timestamp="1967476" />
  <DocumentChange __id="240" _type="Delete" docASTNodeCount="1118" docActiveCodeLength="6651" docExpressionCount="796" docLength="7053" endLine="27" length="146" offset="739" startLine="25" timestamp="1967842">
    <text><![CDATA[// create a file that is really a directory
	    File aDirectory = new File(Utils.getFullPath(MYLYN_LOGS_PATH));
		this.files = aDirectory.list();]]></text>
  </DocumentChange>
  <Command __id="241" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" timestamp="1967868" />
  <DocumentChange __id="242" _type="Insert" docASTNodeCount="1120" docActiveCodeLength="6653" docExpressionCount="797" docLength="7055" length="14" offset="739" repeat="3" timestamp="1969042" timestamp2="1970668">
    <text><![CDATA[super(logPath)]]></text>
  </DocumentChange>
  <Command __id="243" _type="InsertStringCommand" repeat="2" timestamp="1969056" timestamp2="1969258">
    <data><![CDATA[su]]></data>
  </Command>
  <Command __id="246" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" start_end="START" timestamp="1969949" />
  <Command __id="247" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.contentAssist.proposals" timestamp="1970125" />
  <Command __id="248" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" start_end="END" timestamp="1970664" />
  <Command __id="250" _type="InsertStringCommand" timestamp="1970703">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="251" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" timestamp="1971709" />
  <DocumentChange __id="252" _type="Replace" docASTNodeCount="1120" docActiveCodeLength="6673" docExpressionCount="797" docLength="7075" endLine="25" insertionLength="15" int_docASTNodeCount="1119" int_docActiveCodeLength="6658" int_docExpressionCount="796" int_docLength="7060" length="7" offset="745" startLine="25" timestamp="1971900">
    <deletedText><![CDATA[logPath]]></deletedText>
    <insertedText><![CDATA[MYLYN_LOGS_PATH]]></insertedText>
  </DocumentChange>
  <Command __id="253" _type="InsertStringCommand" timestamp="1971912">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="254" _type="Insert" docASTNodeCount="1120" docActiveCodeLength="6674" docExpressionCount="797" docLength="7076" length="1" offset="761" timestamp="1973045">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <Command __id="255" _type="InsertStringCommand" timestamp="1973058">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="256" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" timestamp="1976789" />
  <Command __id="257" _type="MoveCaretCommand" caretOffset="266" docOffset="763" timestamp="1980505" />
  <DocumentChange __id="258" _type="Delete" docASTNodeCount="1120" docActiveCodeLength="6673" docExpressionCount="797" docLength="7075" endLine="26" length="1" offset="762" startLine="25" timestamp="1981304">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <Command __id="259" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" timestamp="1981313" />
  <DocumentChange __id="260" _type="Insert" docASTNodeCount="1120" docActiveCodeLength="6676" docExpressionCount="797" docLength="7078" length="3" offset="762" timestamp="1983325">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <Command __id="261" _type="InsertStringCommand" timestamp="1983348">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="262" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" timestamp="1984387" />
  <Command __id="263" _type="SelectTextCommand" caretOffset="5349" docEnd="5896" docOffset="5846" docStart="5846" end="5399" start="5349" timestamp="2016666" />
  <DocumentChange __id="264" _type="Insert" docASTNodeCount="1120" docActiveCodeLength="6693" docExpressionCount="797" docLength="7095" length="17" offset="7069" timestamp="2070243">
    <text><![CDATA[
		return res;
	}]]></text>
  </DocumentChange>
  <DocumentChange __id="265" _type="Insert" docASTNodeCount="1126" docActiveCodeLength="6739" docExpressionCount="800" docLength="7141" length="46" offset="7069" timestamp="2070250">
    <text><![CDATA[if(currentRes > res){
			res = currentRes;
		}]]></text>
  </DocumentChange>
  <DocumentChange __id="266" _type="Insert" docASTNodeCount="1145" docActiveCodeLength="6794" docExpressionCount="810" docLength="7196" length="55" offset="7069" timestamp="2070254">
    <text><![CDATA[private Long updateTime(Long res, Long currentRes) {
		]]></text>
  </DocumentChange>
  <DocumentChange __id="267" _type="Insert" docASTNodeCount="1145" docActiveCodeLength="6796" docExpressionCount="810" docLength="7198" length="2" offset="7069" timestamp="2070257">
    <text><![CDATA[
	]]></text>
  </DocumentChange>
  <DocumentChange __id="268" _type="Delete" docASTNodeCount="1136" docActiveCodeLength="6746" docExpressionCount="804" docLength="7148" endLine="200" length="50" offset="6981" startLine="198" timestamp="2070260">
    <text><![CDATA[if(currentRes > res){
					res = currentRes;
				}]]></text>
  </DocumentChange>
  <DocumentChange __id="269" _type="Insert" docASTNodeCount="1143" docActiveCodeLength="6780" docExpressionCount="810" docLength="7182" length="34" offset="6981" timestamp="2070264">
    <text><![CDATA[res = updateTime(res, currentRes);]]></text>
  </DocumentChange>
  <DocumentChange __id="270" _type="Delete" docASTNodeCount="1134" docActiveCodeLength="6730" docExpressionCount="804" docLength="7132" endLine="192" length="50" offset="6721" startLine="190" timestamp="2070268">
    <text><![CDATA[if(currentRes > res){
					res = currentRes;
				}]]></text>
  </DocumentChange>
  <DocumentChange __id="271" _type="Insert" docASTNodeCount="1141" docActiveCodeLength="6764" docExpressionCount="810" docLength="7166" length="34" offset="6721" timestamp="2070272">
    <text><![CDATA[res = updateTime(res, currentRes);]]></text>
  </DocumentChange>
  <DocumentChange __id="272" _type="Delete" docASTNodeCount="1132" docActiveCodeLength="6714" docExpressionCount="804" docLength="7116" endLine="184" length="50" offset="6493" startLine="182" timestamp="2070275">
    <text><![CDATA[if(currentRes > res){
					res = currentRes;
				}]]></text>
  </DocumentChange>
  <DocumentChange __id="273" _type="Insert" docASTNodeCount="1139" docActiveCodeLength="6748" docExpressionCount="810" docLength="7150" length="34" offset="6493" timestamp="2070279">
    <text><![CDATA[res = updateTime(res, currentRes);]]></text>
  </DocumentChange>
  <DocumentChange __id="274" _type="Delete" docASTNodeCount="1130" docActiveCodeLength="6696" docExpressionCount="804" docLength="7098" endLine="177" length="52" offset="6327" startLine="175" timestamp="2070282">
    <text><![CDATA[if(currentRes > res){
						res = currentRes;
					}]]></text>
  </DocumentChange>
  <DocumentChange __id="275" _type="Insert" docASTNodeCount="1137" docActiveCodeLength="6730" docExpressionCount="810" docLength="7132" length="34" offset="6327" timestamp="2070287">
    <text><![CDATA[res = updateTime(res, currentRes);]]></text>
  </DocumentChange>
  <DocumentChange __id="276" _type="Delete" docASTNodeCount="1128" docActiveCodeLength="6678" docExpressionCount="804" docLength="7080" endLine="170" length="52" offset="6070" startLine="168" timestamp="2070290">
    <text><![CDATA[if(currentRes > res){
						res = currentRes;
					}]]></text>
  </DocumentChange>
  <DocumentChange __id="277" _type="Insert" docASTNodeCount="1135" docActiveCodeLength="6712" docExpressionCount="810" docLength="7114" length="34" offset="6070" timestamp="2070294">
    <text><![CDATA[res = updateTime(res, currentRes);]]></text>
  </DocumentChange>
  <DocumentChange __id="278" _type="Delete" docASTNodeCount="1126" docActiveCodeLength="6662" docExpressionCount="804" docLength="7064" endLine="163" length="50" offset="5846" startLine="161" timestamp="2070297">
    <text><![CDATA[if(currentRes > res){
					res = currentRes;
				}]]></text>
  </DocumentChange>
  <DocumentChange __id="279" _type="Insert" docASTNodeCount="1133" docActiveCodeLength="6696" docExpressionCount="810" docLength="7098" length="34" offset="5846" timestamp="2070302">
    <text><![CDATA[res = updateTime(res, currentRes);]]></text>
  </DocumentChange>
  <DocumentChange __id="280" _type="Delete" docASTNodeCount="1124" docActiveCodeLength="6646" docExpressionCount="804" docLength="7048" endLine="156" length="50" offset="5682" startLine="154" timestamp="2070305">
    <text><![CDATA[if(currentRes > res){
					res = currentRes;
				}]]></text>
  </DocumentChange>
  <DocumentChange __id="281" _type="Insert" docASTNodeCount="1131" docActiveCodeLength="6680" docExpressionCount="810" docLength="7082" length="34" offset="5682" timestamp="2070309">
    <text><![CDATA[res = updateTime(res, currentRes);]]></text>
  </DocumentChange>
  <Command __id="282" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.extract.method" timestamp="2071482" />
  <Command __id="283" _type="InsertStringCommand" timestamp="2077626">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="284" _type="SelectTextCommand" caretOffset="2005" docEnd="2588" docOffset="2502" docStart="2502" end="2091" start="2005" timestamp="2133159" />
  <DocumentChange __id="285" _type="Delete" docASTNodeCount="1131" docActiveCodeLength="6679" docExpressionCount="810" docLength="6996" endLine="68" length="86" offset="2502" startLine="67" timestamp="2133481">
    <text><![CDATA[
//						String projectName = getProjectName(theNode.getAttribute("StructureHandle"));]]></text>
  </DocumentChange>
  <Command __id="286" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" timestamp="2133494" />
  <Command __id="287" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" timestamp="2135535" />
  <Command __id="288" _type="InsertStringCommand" timestamp="2182514">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="289" _type="FileOpenCommand" docASTNodeCount="278" docActiveCodeLength="1875" docExpressionCount="191" docLength="2169" projectName="espionage" timestamp="2184399">
    <filePath><![CDATA[/Users/user/Documents/workspace/dev/espionage/plugin/espionage/src/edu/cwi/espionage/util/PieChart.java]]></filePath>
    <snapshot><![CDATA[package edu.cwi.espionage.util;

import java.awt.Frame;

import javax.swing.JFrame;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.PieDataset;
import org.jfree.util.Rotation;

public class PieChart extends JFrame {

        private static final long serialVersionUID = 1L;

        public PieChart(String applicationTitle, String chartTitle, Frame frame) {
        super(applicationTitle);
        // This will create the dataset
        PieDataset dataset = createDataset();
        // based on the dataset we create the chart
        JFreeChart chart = createChart(dataset, chartTitle);
        // we put the chart into a panel
        ChartPanel chartPanel = new ChartPanel(chart);
       
        // default size
        chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
        frame.add(chartPanel);
        // add it to our application
       // setContentPane(chartPanel);

    }

    /**
     * Creates a sample dataset
     */
    private  PieDataset createDataset() {
        DefaultPieDataset result = new DefaultPieDataset();
        result.setValue("Linux", 29);
        result.setValue("Mac", 20);
        result.setValue("Windows", 51);
        return result;

    }

    /**
     * Creates a chart
     */
    private JFreeChart createChart(PieDataset dataset, String title) {

        JFreeChart chart = ChartFactory.createPieChart3D(
            title,                                  // chart title
            dataset,                // data
            true,                   // include legend
            true,
            false
        );

        PiePlot3D plot = (PiePlot3D) chart.getPlot();
        plot.setStartAngle(290);
        plot.setDirection(Rotation.CLOCKWISE);
        plot.setForegroundAlpha(0.5f);
        return chart;

    }
    
    public static void create(Frame frame) {
        PieChart demo = new PieChart("Comparison", "Which operating system are you using?",frame);
        demo.pack();
        demo.setVisible(true);
    }
}
]]></snapshot>
  </Command>
  <Command __id="290" _type="MoveCaretCommand" caretOffset="0" docOffset="0" timestamp="2184659" />
  <Command __id="291" _type="FileOpenCommand" docASTNodeCount="463" docActiveCodeLength="2161" docExpressionCount="281" docLength="2161" projectName="espionage" timestamp="2192536">
    <filePath><![CDATA[/Users/user/Documents/workspace/dev/espionage/plugin/espionage/src/edu/cwi/espionage/util/Utils.java]]></filePath>
    <snapshot><![CDATA[package edu.cwi.espionage.util;

import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.eclipse.core.runtime.Platform;

public class Utils {
	
	public static final String Y_HOURS = "Hours";
	public static final String Y_MINUTES = "Minutes";

	public static String getClassName(String pathName, String regex) {
		String[] pathSplit = pathName.split(regex);
		return pathSplit[pathSplit.length - 1];
	}
	
	public static Integer getYValue(Long time, String yValue) {
		Map<String, Integer> values = new HashMap<String, Integer>();
		values.put(Y_HOURS, DateManipulator.getHoursFromDiff(time));
		values.put(Y_MINUTES, DateManipulator.getMinutesFromDiff(time));
		return values.get(yValue);
	}

	public static String getFullPath(String file) {
		String workspace = Platform.getLocation().toFile().getAbsolutePath();
		return workspace + file;

	}

	public static String getFullPath(String file, String logPath) {
		String workspace = Platform.getLocation().toFile().getAbsolutePath();
		return workspace + logPath + file;

	}

	public static String regexChecker(String theRegex, String str2Check) {
		Pattern checkRegex = Pattern.compile(theRegex);
		Matcher regexMatcher = checkRegex.matcher(str2Check);
		while (regexMatcher.find()) {

			if (regexMatcher.group().length() != 0) {
				return regexMatcher.group().trim();

			}

		}
		return "";
	}
	
	public static <K, V extends Comparable<? super V>> Map<K, V> sortByValue(Map<K, V> unsortMap) {

	    List<Map.Entry<K, V>> list =
	            new LinkedList<Map.Entry<K, V>>(unsortMap.entrySet());

	    Collections.sort(list, new Comparator<Map.Entry<K, V>>() {
	        public int compare(Map.Entry<K, V> o1, Map.Entry<K, V> o2) {
	            return (o1.getValue()).compareTo(o2.getValue());
	        }
	    });

	    Map<K, V> result = new LinkedHashMap<K, V>();
	    for (Map.Entry<K, V> entry : list) {
	        result.put(entry.getKey(), entry.getValue());
	    }

	    return result;

	}

}
]]></snapshot>
  </Command>
  <Command __id="292" _type="MoveCaretCommand" caretOffset="0" docOffset="0" timestamp="2192790" />
</Events>
