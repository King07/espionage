package edu.cwi.espionage.model;

import java.time.Instant;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import edu.cwi.espionage.util.DateManipulator;
import edu.cwi.espionage.util.IdleTimeTable;
import edu.cwi.espionage.util.Utils;

public class ProcessCase {
	private static final long MINIMUM_IDLE_TIME = 600000; //10 minutes as default.
	private String caseId;
	private List<Event> events;
	private long startTime;
	private long idleTime;
	private long lastEventTime;
	private IdleTimeTable idleTimeTable;
	
	public ProcessCase(String caseId) {
		this.events = new ArrayList<Event>();
		this.setCaseId(caseId);
		this.setIdleTimeTable(new IdleTimeTable());
	}

	public String getCaseId() {
		return caseId;
	}

	public void setCaseId(String caseId) {
		this.caseId = caseId;
	}

	public List<Event> getEvents() {
		return events;
	}

	public void setEvents(List<Event> events) {
		this.events = events;
	}
	
	public void addEvents(Event event) {
		this.events.add(event);
	}

	public long getIdleTime() {
		return idleTime;
	}

	public void setIdleTime(long idleTime) {
		this.idleTime = idleTime;
	}

	public long getTotalTime() {
//		Event event = events.get(events.size() - 1);
//		return event.getElapstime();
		System.out.println(getStartTime()+"-"+getLastEventTime()+"="+DateManipulator.diff(getStartTime(), getLastEventTime()));
		long globalTime = DateManipulator.diff(getStartTime(), getLastEventTime())*1000;
		long processTime = DateManipulator.diff(globalTime, getIdleTime());
		return processTime;
	}
	
	public List<ProcessCase> getByDate() {
		List<ProcessCase> pc = new ArrayList<>();
		List<Event> eventsTemp = new ArrayList<>(events);
		while (!eventsTemp.isEmpty()) {
			Event topEvent = eventsTemp.get(0);
			ProcessCase pcTemp = new ProcessCase(getCaseId());
			for (Event e : events) {
				if(topEvent.compareTo(e) == 0){
					if(pcTemp.getEvents().isEmpty()){
						pcTemp.setStartTime(e.getTimestamp().getTime()/1000);
					}
					else{
						calculateIdleTime(pcTemp, e);
						
					}
					pcTemp.addEvents(e);
					pcTemp.setLastEventTime(e.getTimestamp().getTime()/1000);
					eventsTemp.remove(e);
				}
			}
			System.out.println("getTotalTime: ===> "+DateManipulator.getMinutesFromDiff(pcTemp.getTotalTime()));
			System.out.println(Date.from(Instant.ofEpochSecond(pcTemp.getLastEventTime()))+"<=====>"+this.getIdleTimeTable());
			pcTemp.setIdleTime(this.getIdleTimeTable().lookupIdleTime(DateManipulator.getFormatedDate(Date.from(Instant.ofEpochSecond(pcTemp.getLastEventTime())), "dd/MM/yyyy")));
			pc.add(pcTemp);
		}
		System.out.println("getIdleTime: ===> "+DateManipulator.getMinutesFromDiff(getIdleTime()));
		return pc;
	}

	private void calculateIdleTime(ProcessCase pcTemp, Event e) {
		Event event2 = pcTemp.getEvents().get(pcTemp.getEvents().size()-1);
		if (IsInactive(event2, e)) {
			long idleTime = getInactiveTime(e, event2);
			//long incrIdleTime = DateManipulator.add(pcTemp.getIdleTime(), idleTime);
			//pcTemp.setIdleTime(incrIdleTime);
			pcTemp.getIdleTimeTable().add(DateManipulator.getFormatedDate(e.getTimestamp(), "dd/MM/yyyy"),idleTime);
		}
	}
	
	/**
	 * To calculate inactive time:
	 * CONTEXT: The fluorite log all developers events. 
	 * METHOD : Visualizing Developer Interactions by  Roberto Minelli, Andrea Mocci, Michele Lanza and Lorenzo Baracchi
	 * 			idle time = event2 - event1 => if idle time is more than “minimum  idle  time (10 minutes)”, Then it suggest
	 * 			that the user is inactive.
	 * {@link http://conferences.computer.org/vissoft/2014/papers/6150a147.pdf } 
	 * @param Event e1
	 * @param Event e2
	 * 
	 * @return
	 */
	private long getInactiveTime(Event e1, Event e2){
		return Math.abs(e2.getTimestamp().getTime() - e1.getTimestamp().getTime());
	}
	
	private boolean IsInactive(Event e1, Event e2){
		System.out.println("EVENTS 1: "+e1.getTimestamp());
		System.out.println("EVENTS 2: "+e2.getTimestamp());
		boolean isInactive = false;
		if(getInactiveTime(e1,e2) > MINIMUM_IDLE_TIME){
			System.out.println("YAAAAYYYY");
			isInactive = true;
		}
		return isInactive;
	}
	
	@Override
	public String toString() {
//		StringBuilder str = new StringBuilder("["+getCaseId()+" || ");
//		for (Event event : events) {
//			str.append(event.toString());
//		}
//		return str.toString();
		return Utils.getClassName(getCaseId(), "/");
	}

	public long getLastEventTime() {
		return lastEventTime;
	}

	public void setLastEventTime(long lastEventTime) {
		this.lastEventTime = lastEventTime;
	}

	public long getStartTime() {
		return startTime;
	}

	public void setStartTime(long startTime) {
		this.startTime = startTime;
	}

	public IdleTimeTable getIdleTimeTable() {
		return idleTimeTable;
	}

	public void setIdleTimeTable(IdleTimeTable idleTimeTable) {
		this.idleTimeTable = idleTimeTable;
	}
	
}
