package edu.cwi.espionage.views;

import org.eclipse.swt.widgets.Canvas;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.ui.part.*;
import edu.cwi.espionage.model.Cases;
import edu.cwi.espionage.model.ProcessCase;
import edu.cwi.espionage.util.Date;
import edu.cwi.espionage.util.Utils;
import edu.cwi.espionage.util.XMLDomParser;

import java.awt.BorderLayout;
import java.awt.Frame;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;

import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;

import org.eclipse.jface.viewers.TableViewer;
import org.eclipse.jface.viewers.TreeViewer;
import org.eclipse.swt.SWT;
import org.eclipse.swt.awt.SWT_AWT;
import org.eclipse.swt.events.PaintEvent;
import org.eclipse.swt.events.PaintListener;



/**
 * This sample class demonstrates how to plug-in a new workbench view. The view
 * shows data obtained from the model. The sample creates a dummy model on the
 * fly, but a real implementation would connect to the model available either in
 * this or another plug-in (e.g. the workspace). The view is connected to the
 * model using a content provider.
 * <p>
 * The view uses a label provider to define how model objects should be
 * presented in the view. Each view can present the same model objects using
 * different labels and icons, if needed. Alternatively, a single label provider
 * can be shared between views in order to ensure that objects of the same type
 * are presented in the same way everywhere.
 * <p>
 */

public class SampleView extends ViewPart {

	/**
	 * The ID of the view as specified by the extension.
	 */
	public static final String ID = "edu.cwi.espionage.views.SampleView";
//
	//private TableViewer viewer;
//	private TreeViewer treeViewer;

	/**
	 * The constructor.
	 */
	public SampleView() {
	}
	
//    public void createPartControl(Composite parent) {
//      treeViewer = new TreeViewer(parent,
//        SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL );
//    }
//    public void setFocus() {
//      treeViewer.getControl().setFocus();
//    }

	/**
	 * This is a callback that will allow us to create the viewer and initialize
	 * it.
	 */
	public void createPartControl(Composite parent) {
		String xml = "/.metadata/.plugins/edu.cmu.scs.fluorite/Logs/test.xml";
		
		XMLDomParser xmlDomParser = new XMLDomParser(xml);
		Cases cases = xmlDomParser.getCases();
//		
////		System.out.println(cases.toString());
////		cases.printCases();
		Iterator<Entry<String, ProcessCase>> it = cases.getProcessCases().entrySet().iterator();
	    while (it.hasNext()) {
	        Map.Entry<String, ProcessCase> pair = it.next();
	        System.out.println(Utils.getClassName(pair.getKey(), "/"));
	        System.out.println("RAW === " + pair.getValue().getTotalTime());
	        System.out.println("FORMATED === " + Date.getFormatedDiff(pair.getValue().getTotalTime()));
	        //cases.getProcessCasesIterator().remove(); // avoids a ConcurrentModificationException
	    }
//		System.out.println(Date.getFormatedDiff(615292));
//		final Canvas clock = new Canvas(parent, SWT.NONE);
//		clock.addPaintListener(new PaintListener() {
//			public void paintControl(PaintEvent e) {
//				e.gc.drawArc(e.x, e.y, e.width - 1, e.height - 1, 0, 360);
//			}
//		});
		Composite composite = new Composite(parent, SWT.EMBEDDED | SWT.NO_BACKGROUND);
		Frame frame = SWT_AWT.new_Frame(composite);
//		  JPanel panel = new JPanel(new BorderLayout());
//		  JButton button = new JButton("Swing button");
//		  JLabel label = new JLabel("Swing label");
//		  panel.add(label,BorderLayout.NORTH);
//		  panel.add(button,BorderLayout.CENTER);
//		  frame.add(panel);
//		javax.swing.SwingUtilities.invokeLater(new Runnable() {
//			public void run() {
				TreeDemo.createAndShowGUI(frame, cases);
//			}
//		});
	}

	/**
	 * Passing the focus request to the viewer's control.
	 */
	public void setFocus() {
		//viewer.getControl().setFocus();
	}
}
