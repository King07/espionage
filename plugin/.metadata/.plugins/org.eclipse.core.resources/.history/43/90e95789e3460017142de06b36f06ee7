package edu.cwi.espionage.util;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;

public class IdleTimeTable {
	private Map<String, HashMap<Integer, Long>> idleTimeTable;

	public IdleTimeTable() {
		idleTimeTable = new HashMap<String, HashMap<Integer, Long>>();
	}

	public boolean contains(String date) {
		return idleTimeTable.containsKey(date);
	}
	
	public boolean containHour(String date, Integer hour) {
		return idleTimeTable.get(date).containsKey(hour);
	}

	public void add(String date, Integer hour, Long idleTime) {
		
		if(contains(date)){
			if(containHour(date, hour)){
				System.out.println("Before idleTimeTable = "+idleTimeTable);
				Long lookup = DateManipulator.add(lookupIdleTime(date,hour), idleTime);
				System.out.println("lookupIdleTime(date,hour) = "+lookupIdleTime(date,hour));
				System.out.println("The Idle = "+idleTime);
				System.out.println("Lookup total = "+lookup);
				HashMap<Integer,Long> hLookup = idleTimeTable.get(date);
				hLookup.put(hour, lookup);
				idleTimeTable.put(date, hLookup);
				System.out.println("After idleTimeTable = "+idleTimeTable);
			}
			
		}else{
			HashMap<Integer,Long> hLookup = new HashMap<Integer,Long>();
			for (int i = 1; i <= 24; i++) {
				hLookup.put(i, new Long(0));
			}
			hLookup.put(hour, idleTime);
			idleTimeTable.put(date, hLookup);
		}
	}

	private void setDefaultHours(HashMap<Integer, Long> hLookup) {
		for (int i = 1; i <= 24; i++) {
			hLookup.put(i, new Long(0));
		}
	}

	public Long lookupIdleTime(String date, Integer hour) {
		if(idleTimeTable.get(date) != null){
			if(idleTimeTable.get(date).get(hour) != null){
				return idleTimeTable.get(date).get(hour);
			}
		}
		return new Long(0);
	}
//
//	public Boolean isEmpty() {
//		return idleTimeTable.isEmpty();
//	}
	
	public Long total() {
		Long total = new Long(0);
		Iterator<Entry<String, HashMap<Integer, Long>>> pit = idleTimeTable.entrySet().iterator();
	    while (pit.hasNext()) {
	    	Map.Entry<String, HashMap<Integer, Long>> pair = pit.next();
	    	HashMap<Integer, Long> hourValues = pair.getValue();
	    	total += hourValues.values().stream().mapToLong(Long::longValue).sum();
	    }
		return total;
	}
	
	public Long total(String formatedDate,Integer lower, Integer upper) {
		Long lookupIdleTime = new Long(0);
		for (int i = lower; i <= upper; i++) {
			 lookupIdleTime += lookupIdleTime(formatedDate, i);
		}
		return lookupIdleTime;
	}

	@Override
	public String toString() {
		return idleTimeTable.toString();
	}

}

