/*
 * Copyright (c) 1995, 2008, Oracle and/or its affiliates. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   - Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *
 *   - Neither the name of Oracle or the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */ 
package edu.cwi.espionage.views;



import javax.swing.BorderFactory;
/**
 * This application that requires the following additional files:
 *   TreeDemoHelp.html
 *    arnold.html
 *    bloch.html
 *    chan.html
 *    jls.html
 *    swingtutorial.html
 *    tutorial.html
 *    tutorialcont.html
 *    vm.html
 */
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreeSelectionModel;

import org.jfree.chart.ChartPanel;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;

import edu.cwi.espionage.model.ProcessCase;
import edu.cwi.espionage.util.Utils;
import edu.cwi.espionage.util.DateManipulator;
import edu.cwi.espionage.util.LineChart;

import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.table.AbstractTableModel;

import java.time.Instant;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.GridLayout;
import java.awt.Insets;
import java.util.Map.Entry;

public class TreeDemo extends JPanel
                      implements TreeSelectionListener {
    private ChartPanel infoPane;
    private JTree tree;;
    private static boolean DEBUG = false;

    //Optionally play with line styles.  Possible values are
    //"Angled" (the default), "Horizontal", and "None".
    private static boolean playWithLineStyle = false;
    private static String lineStyle = "Horizontal";
    
    //Optionally set the look and feel.
    private static boolean useSystemLookAndFeel = false;

    public TreeDemo(Map<String, HashMap<String, ProcessCase>> project) {
        super(new GridLayout(1,0));

        //Create the nodes.
        DefaultMutableTreeNode top =
            new DefaultMutableTreeNode("Espionage");
        createNodes(top,project);

        //Create a tree that allows one selection at a time.
        tree = new JTree(top);
        tree.getSelectionModel().setSelectionMode
                (TreeSelectionModel.SINGLE_TREE_SELECTION);

        //Listen for when the selection changes.
        tree.addTreeSelectionListener(this);

        if (playWithLineStyle) {
            System.out.println("line style = " + lineStyle);
            tree.putClientProperty("JTree.lineStyle", lineStyle);
        }
        //Create the scroll pane and add the tree to it. 
        JScrollPane treeView = new JScrollPane(tree);

        //Create the HTML viewing pane.
//        htmlPane = new JEditorPane();
//        htmlPane.setEditable(false);
        infoPane = new LineChart("").getLineChartPanel("", new ProcessCase(""));
//        infoPane.setBorder(BorderFactory.createLineBorder(Color.black));
//        infoPane.setBorder(BorderFactory.createLoweredBevelBorder());
        JScrollPane infoView = new JScrollPane(infoPane);
        //Add the scroll panes to a split pane.
        JSplitPane splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT);
        splitPane.setTopComponent(treeView);
        splitPane.setBottomComponent(infoView);

        Dimension minimumSize = new Dimension(100, 50);
        infoPane.setMinimumSize(minimumSize);
        treeView.setMinimumSize(minimumSize);
        splitPane.setDividerLocation(100); 
        splitPane.setPreferredSize(new Dimension(500, 300));

        //Add the split pane to this panel.
        add(splitPane);
    }

    /** Required by TreeSelectionListener interface. */
    public void valueChanged(TreeSelectionEvent e) {
        DefaultMutableTreeNode node = (DefaultMutableTreeNode)
                           tree.getLastSelectedPathComponent();

        if (node == null) return;

        Object nodeInfo = node.getUserObject();
        if (node.isLeaf()) {
            ProcessCase processCase = (ProcessCase)nodeInfo;
            infoPane = new LineChart("").getLineChartPanel(processCase.getCaseId(), processCase);
            
//            for (ProcessCase p : processCase.getByDate()) {
//            	System.out.println("TreeSelectionListener => "+ p.getLastEventTime());
//			}
//            displayInfo(processCase);
        }
    }



    private void displayInfo(ProcessCase processCase) {
    	
    	Object columnNames[] = { "DATE", "TIME SPENT"};
    
		Object rowData[][] = new Object[processCase.getByDate().size()][columnNames.length];
		for (int j = 0; j < processCase.getByDate().size(); j++) {
			rowData[j][columnNames.length-2] = DateManipulator.getFormatedDate(Date.from(Instant.ofEpochSecond(processCase.getByDate().get(j).getLastEventTime())),"yyyy-MM-dd");
			rowData[j][columnNames.length-1] = DateManipulator.getFormatedDiff(processCase.getByDate().get(j).getTotalTime());
		}
    	
    	infoPane.setModel(new AbstractTableModel() {
            public String getColumnName(int column) { return columnNames[column].toString(); }
            public int getRowCount() { return rowData.length; }
            public int getColumnCount() { return columnNames.length; }
            public Object getValueAt(int row, int col) { return rowData[row][col]; }
            public boolean isCellEditable(int row, int column) { return false; }
            public void setValueAt(Object value, int row, int col) {
                rowData[row][col] = value;
                fireTableCellUpdated(row, col);
            }
        });
    }

    private void createNodes(DefaultMutableTreeNode top, Map<String, HashMap<String, ProcessCase>> project) {
        DefaultMutableTreeNode pName = null;
        DefaultMutableTreeNode cName = null;

		
		Iterator<Entry<String, HashMap<String, ProcessCase>>> pit = project.entrySet().iterator();
	    while (pit.hasNext()) {
	        Map.Entry<String, HashMap<String, ProcessCase>> ppair = pit.next();
	        System.out.println(ppair.getKey());
	        pName = new DefaultMutableTreeNode(ppair.getKey());
			top.add(pName);
			
			Iterator<Entry<String, ProcessCase>> cit = ppair.getValue().entrySet().iterator();
		    while (cit.hasNext()) {
		        Map.Entry<String, ProcessCase> cpair = cit.next();
		        System.out.println(Utils.getClassName(cpair.getKey(), "/"));
		        //System.out.println("RAW === " + cpair.getValue().getTotalTime());
		      //  System.out.println("FORMATED === " + Date.getFormatedDiff(cpair.getValue().getTotalTime()));
		        cName = new DefaultMutableTreeNode(cpair.getValue());
				pName.add(cName);
		    }
		}
		
    }
      
//    /**
//	 * Creates a sample dataset
//	 */
//	private CategoryDataset createDataset(ProcessCase processCase) {
//		DefaultCategoryDataset result = new DefaultCategoryDataset();
//		for (ProcessCase p : processCase.getByDate()) {
//			result.addValue(DateManipulator.getHoursFromDiff(p.getTotalTime()), "Amount of Time", DateManipulator
//					.getFormatedDate(Date.from(Instant.ofEpochSecond(p.getLastEventTime())), "yyyy-MM-dd"));
//		}
//		return result;
//
//	}
    /**
     * Create the GUI and show it.  For thread safety,
     * this method should be invoked from the
     * event dispatch thread.
     */
    public static void createAndShowGUI(Frame frame, Map<String, HashMap<String, ProcessCase>> project) {
        if (useSystemLookAndFeel) {
            try {
                UIManager.setLookAndFeel(
                    UIManager.getSystemLookAndFeelClassName());
            } catch (Exception e) {
                System.err.println("Couldn't use system look and feel.");
            }
        }

        //Add content to the window.
        frame.add(new TreeDemo(project));

        //Display the window.
        frame.pack();
        frame.setVisible(true);
    }

}
