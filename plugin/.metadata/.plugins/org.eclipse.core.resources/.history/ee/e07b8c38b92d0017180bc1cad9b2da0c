package edu.cwi.espionage.util;


import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

import edu.cwi.espionage.model.ProcessCase;

public class CSVUtils extends FileParser {

    private static final char DEFAULT_SEPARATOR = ',';
    private static final char DEFAULT_QUOTE = '"';
    private static final String MIMEC_LOGS_PATH = "/.metadata/.plugins/mimec/2008_10_29.csv";

    public static void main(String[] args) throws Exception {

        String csvFile = "/Users/mkyong/csv/country2.csv";

        Scanner scanner = new Scanner(new File(csvFile));
        while (scanner.hasNext()) {
            List<String> line = parseLine(scanner.nextLine());
            System.out.println("Country [id= " + line.get(0) + ", code= " + line.get(1) + " , name=" + line.get(2) + "]");
        }
        scanner.close();

    }

    public static List<String> parseLine(String cvsLine) {
        return parseLine(cvsLine, DEFAULT_SEPARATOR, DEFAULT_QUOTE);
    }

    public static List<String> parseLine(String cvsLine, char separators) {
        return parseLine(cvsLine, separators, DEFAULT_QUOTE);
    }

    public static List<String> parseLine(String cvsLine, char separators, char customQuote) {

        List<String> result = new ArrayList<>();

        //if empty, return!
        if (cvsLine == null || cvsLine.isEmpty()) {
            return result;
        }

        if (customQuote == ' ') {
            customQuote = DEFAULT_QUOTE;
        }

        if (separators == ' ') {
            separators = DEFAULT_SEPARATOR;
        }

        StringBuffer curVal = new StringBuffer();
        boolean inQuotes = false;
        boolean startCollectChar = false;
        boolean doubleQuotesInColumn = false;

        char[] chars = cvsLine.toCharArray();

        for (char ch : chars) {

            if (inQuotes) {
                startCollectChar = true;
                if (ch == customQuote) {
                    inQuotes = false;
                    doubleQuotesInColumn = false;
                } else {

                    //Fixed : allow "" in custom quote enclosed
                    if (ch == '\"') {
                        if (!doubleQuotesInColumn) {
                            curVal.append(ch);
                            doubleQuotesInColumn = true;
                        }
                    } else {
                        curVal.append(ch);
                    }

                }
            } else {
                if (ch == customQuote) {

                    inQuotes = true;

                    //Fixed : allow "" in empty quote enclosed
                    if (chars[0] != '"' && customQuote == '\"') {
                        curVal.append('"');
                    }

                    //double quotes in column will hit this!
                    if (startCollectChar) {
                        curVal.append('"');
                    }

                } else if (ch == separators) {

                    result.add(curVal.toString());

                    curVal = new StringBuffer();
                    startCollectChar = false;

                } else if (ch == '\r') {
                    //ignore LF characters
                    continue;
                } else if (ch == '\n') {
                    //the end, break!
                    break;
                } else {
                    curVal.append(ch);
                }
            }

        }

        result.add(curVal.toString());

        return result;
    }

	@Override
	public Map<String, HashMap<String, ProcessCase>> getProject() {
		// TODO Auto-generated method stub
		String csvFile = Utils.getFullPath(MIMEC_LOGS_PATH);
		Map<String, HashMap<String, ProcessCase>> projects = new HashMap<String, HashMap<String, ProcessCase>>();
		
		HashMap<String, ProcessCase> cases = null;

        Scanner scanner = null;
		try {
			scanner = new Scanner(new File(csvFile));
			while (scanner.hasNext()) {
	            List<String> line = parseLine(scanner.nextLine());
	            String date = line.get(1).substring(6).trim();
	            String typeKind = line.get(2).substring(6).trim();
	            String  javaFile = Utils.regexChecker("\\{\\w+\\.java",line.get(3)).replace("{", "");
	            String projectName = Utils.regexChecker("Des\\w+", line.get(3));
	            if(!javaFile.isEmpty()){
//	            	if (projects.containsKey(projectName)) {
//						cases = projects.get(projectName);
//					} else {
//						cases = new HashMap<String, ProcessCase>();
//					}
//					
//					if (projects.containsKey(projectName)
//							&& projects.get(projectName).containsKey(caseId)) {
//						
//						processCase = projects.get(projectName).get(caseId);
//						cases = projects.get(projectName);
//						long idleTime = edu.cwi.espionage.util.DateManipulator
//								.diff(processCase.getLastEventTime(), currDate);
//						long incrIdleTime = edu.cwi.espionage.util.DateManipulator
//								.add(processCase.getIdleTime(), idleTime);
//						processCase.setIdleTime(incrIdleTime);
//					} else {
//						long idleTime = edu.cwi.espionage.util.DateManipulator.diff(initDate, currDate);
//						processCase = new ProcessCase(caseId);
//
//						processCase.setIdleTime(idleTime);
//					}
//					processCase.setLastEventTime(currDate);
//					System.out.println(caseId);
	            }
	            System.out.println("Event [date= " +  date + ", kind= " + typeKind + " , sourceHandle=" + javaFile + " , projectName=" + projectName + "]");
	            
	            
	            
	        }
	     
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally {
			if(scanner != null){
				scanner.close();
			}
		}
        
		return null;
	}

}
